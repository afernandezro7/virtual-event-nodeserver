{"version":3,"sources":["components/EventDasboard/Components_Aside/AsideHeader.js","helpers/fetchJWT.js","redux/types/types.js","redux/actions/chActions.js","redux/actions/pageActions.js","components/EventDasboard/Components_Aside/AsideDasboard.js","components/EventDasboard/Components_Aside/AsideChannelSelector.js","components/EventDasboard/Components_Aside/AsideMenuScreen.js","components/EventDasboard/Components_StickyNavbar/StickyLeft.js","redux/actions/authActions.js","components/EventDasboard/Components_StickyNavbar/StickyRight.js","components/EventDasboard/Components_StickyNavbar/StickyHeader.js","components/EventDasboard/Components_Main/ChanelScreen.js","components/ui/ChannelCard.js","components/EventDasboard/Components_Main/DashConfigChannelCards.js","components/ui/MultiSelector.js","hooks/useForm.js","components/EventDasboard/Components_Main/DashConfigChannels.js","components/ui/UploadPics.js","redux/actions/userActions.js","redux/actions/speakerActions.js","components/EventDasboard/Components_Main/DashConfigPonentes.js","components/EventDasboard/Components_Main/DashConfigPonentesTable.js","components/EventDasboard/Components_Main/DashConfigScreen.js","redux/actions/posterActions.js","components/ui/GalleryCard.js","components/EventDasboard/Components_Main/DashGalleryCards.js","components/EventDasboard/Components_Main/DashGalleryForm.js","components/EventDasboard/Components_Main/DashGalleryScreen.js","components/EventDasboard/Components_Main/DashRegister.js","components/EventDasboard/Components_Main/DashRegTable.js","components/ui/Loading.js","components/EventDasboard/Components_Main/DashRegScreen.js","components/EventDasboard/Components_Main/InfoDescripcion.js","components/EventDasboard/Components_Main/InfoPonentes.js","components/EventDasboard/Components_Main/InfoScreen.js","components/EventDasboard/Components_Main/PosterGalleryScreen.js","components/EventDasboard/Components_Main/MainWraper.js","components/EventDasboard/Components_Footer/FooterScreen.js","components/EventDasboard/EventDasboardScreen.js","components/LoginScreen/LoginForm.js","components/LoginScreen/LoginScreen.js","router/PrivateRoute.js","router/PublicRoute.js","router/AppRouter.js","redux/reducers/authReducer.js","redux/reducers/channelReducer.js","redux/reducers/pageReducer.js","redux/reducers/posterReducer.js","redux/reducers/speakerReducer.js","redux/reducers/userReducer.js","redux/reducers/rootReducers.js","redux/store/store.js","App.js","index.js"],"names":["AsideHeader","movilAside","setmovilAside","setcollapsinStyle","className","type","data-toggle","data-target","aria-expanded","onClick","setTimeout","href","baseUrl","process","fetchWithoutToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","fetchWithTokenFormData","formData","getFormData","object","FormData","Object","keys","forEach","key","append","types","chGetListAction","channels","payload","chUnSetActiveAction","chAddNewAction","channel","chDeleteAction","chID","pgSetActiveAction","page","AsideDasboard","dashTag","dashboardActive","setdashboardActive","handleSelectItem","AsideChannelSelector","channelsTag","channelActive","setchannelActive","handleSelectChannel","useSelector","state","length","map","ch","title","id","roleDasboardAccessWhiteList","tagsStyleInitialState","infoTag","galleryTag","AsideMenuScreen","toggleAside","useState","collapsinStyle","AsidetagActive","setAsidetagActive","role","auth","activePg","dispatch","useDispatch","useEffect","target","indexOf","StickyLeft","settoggleAside","authLoginAction","user","authCheckingAction","authLogoutAction","StickyRight","userRole","userImage","img","userName","toggleProfile","settoggleProfile","e","preventDefault","style","maxWidth","src","alt","a","clear","StickyHeader","ChanelScreen","activeCH","streamSrc","playing","controls","width","height","description","ChannelCard","speakers","speaker","name","channelID","resp","json","ok","Swal","fire","msg","DashConfigChannelCards","image","Empty","PRESENTED_IMAGE_SIMPLE","Option","Select","MultiSelector","placeholder","reciveValue","mode","onChange","arrayOfKeys","dataSelected","find","element","el","useForm","initialState","email","password","values","setValues","reset","handleInputChange","value","DashConfigChannels","channelTitle","channelSRC","channelDescription","formvalues","multiSelectValue","setselectValue","isValidForm","setIsValidForm","onSubmit","trim","usuario","channelToDB","channelToReducer","noValidate","fontSize","UploadPics","formImage","setimageValue","isLoaded","imgFile","display","file","files","objectURL","URL","createObjectURL","tempUrl","document","querySelector","click","startAddNewUser","userToReducer","userSetActiveAction","userAddNewAction","startDeleteUser","uid","userDeleteAction","userGetListAction","users","spGetListAction","spAddNewAction","spDeleteAction","formInitialState","formName","formUser","formEmail","formTitle","formPassword","formPassword2","formTopic","formCountry","imgInitialState","DashConfigPonentes","formWhatsapp","setformWhatsapp","validator","isEmail","undefined","country","topic","whatsApp","archive","getState","activeUser","speakerToDB","international","defaultCountry","maxHeight","Column","Table","DashConfigPonentesTable","handleDeleteUser","speakerId","speakerUid","speakerEndpoint","dataSource","scroll","x","dataIndex","fixed","render","text","record","DashConfigScreen","posterGetListAction","posters","posterAddNewAction","poster","posterDeleteAction","posterID","Meta","Card","GalleryCard","urlImg","cardTitleName","cardTitle","formAlt","cardInfoName","cardInfo","action","actionName","onBntClick","cardClick","hoverable","cover","danger","DashGalleryCards","handleDeletePoster","posterId","posterEndpoint","info","fornImageInitialState","DashGalleryForm","formInfo","posterToReducer","DashGalleryScreen","userFormInitialState","registerUser","registerName","registerEmail","registerPassword","registerConfirmation","registerRole","DashRegister","disabled","DashRegTable","Loading","DashRegScreen","checking","usersToReducer","usuarios","console","log","Panel","Collapse","InfoDescripcion","descriptions","descripcion","accordion","desc","i","header","columns","InfoPonentes","nombre","titulo","pais","tema","pagination","pageSize","InfoScreen","PosterGalleryScreen","activePoster","modalVisible","setmodalVisible","getPoster","posterSetActiveAction","handleOkModal","centered","visible","onOk","onCancel","MainWraper","FooterScreen","position","bottom","EventDasboardScreen","channelChecking","speakersChecking","postersChecking","_id","channelsList","rest","postersToReducer","LoginForm","setItem","Date","getTime","startLogin","aria-hidden","required","LoginScreen","PrivateRoute","isLogged","Component","component","props","to","exact","PublicRoute","AppRouter","path","activeSpeaker","rootReducers","combineReducers","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","ReactDOM","getElementById"],"mappings":"mdAEaA,EAAc,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,kBAcpD,OACI,sBAAKC,UAAU,gBAAf,UACI,yBACEC,KAAK,SACLD,UAAU,0BACVE,cAAY,WACZC,cAAY,YACZC,gBAAc,QACdC,QApBgB,WAC1BP,GAAeD,GAEXA,IACFE,EAAkB,8BAClBO,YAAW,WACTP,EAAkB,iCACjB,OAOG,UAQE,sBAAMC,UAAU,UAAhB,+BACA,sBAAMA,UAAU,aAChB,sBAAMA,UAAU,aAChB,sBAAMA,UAAU,gBAElB,6BACE,oBAAGA,UAAU,eAAeO,KAAK,KAAjC,UACE,mBAAGP,UAAU,mBADf,SAGE,sBAAMA,UAAU,iBAAhB,0C,iCCnCVQ,EAAUC,6CAEHC,EAAoB,SAAEC,EAAUC,GAAyB,IAAnBC,EAAkB,uDAAT,MAElDC,EAAG,UAAMN,EAAN,YAAkBG,GAE3B,MAAgB,QAAXE,EACME,MAAOD,GAEPC,MAAOD,EAAM,CAChBD,OAAQA,EACRG,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAWP,MAKrBQ,EAAiB,SAAET,EAAUC,GAAyB,IAAnBC,EAAkB,uDAAT,MAE/CC,EAAG,UAAMN,EAAN,YAAkBG,GACrBU,EAAQC,aAAaC,QAAQ,UAAY,GAE/C,MAAgB,QAAXV,EACME,MAAOD,EAAK,CACfD,OAAQA,EACRG,QAAS,CACL,MAASK,GAEbJ,KAAMC,KAAKC,UAAWP,KAGnBG,MAAOD,EAAM,CAChBD,OAAQA,EACRG,QAAS,CACL,eAAgB,mBAChB,MAASK,GAEbJ,KAAMC,KAAKC,UAAWP,MAKrBY,EAAyB,SAAEb,EAAUC,GAAyB,IAAnBC,EAAkB,uDAAT,MAEvDC,EAAG,UAAMN,EAAN,YAAkBG,GACrBU,EAAQC,aAAaC,QAAQ,UAAY,GAEzCE,EAAWC,EAAYd,GAG7B,MAAgB,QAAXC,EACME,MAAOD,EAAK,CACfD,OAAQA,EACRG,QAAS,CACL,MAASK,GAEbJ,KAAMC,KAAKC,UAAWP,KAGnBG,MAAOD,EAAM,CAChBD,OAAQA,EACRG,QAAS,CACL,MAASK,GAEbJ,KAAMQ,KAKZC,EAAa,SAACC,GAChB,IAAMF,EAAW,IAAIG,SAErB,OADAC,OAAOC,KAAKH,GAAQI,SAAQ,SAAAC,GAAG,OAAIP,EAASQ,OAAOD,EAAKL,EAAOK,OACxDP,GCxEES,EAGW,qCAHXA,EAOE,eAPFA,EAQG,gBARHA,EAYM,yBAZNA,EAaQ,2BAbRA,EAgBK,uBAhBLA,EAmBe,yBAnBfA,EAsBG,qBAtBHA,EA0BI,+BA1BJA,EA6BG,6BA7BHA,EAgCa,mCAhCbA,EAmCC,2BAnCDA,EAuCI,+BAvCJA,EAwCM,iCAxCNA,EA2Ca,mCA3CbA,EA6CC,4BA7CDA,EA8CC,2BA9CDA,EAkDQ,yBAlDRA,EAsDQ,6BAtDRA,EAuDU,+BAvDVA,EA0DiB,iCA1DjBA,EA4DK,0BA5DLA,EA6DK,yB,iBCsCZC,EAAkB,SAAEC,GACtB,MAAM,CACFnC,KAAMiC,EACNG,QAASD,IASJE,EAAsB,WAC/B,MAAM,CACFrC,KAAMiC,IAGRK,EAAiB,SAAEC,GACrB,MAAM,CACFvC,KAAMiC,EACNG,QAASG,IAGXC,EAAiB,SAAEC,GACrB,MAAM,CACFzC,KAAMiC,EACNG,QAASK,IChHJC,EAAoB,SAAEC,GAC/B,MAAM,CACF3C,KAAMiC,EACNG,QAASO,IChBJC,EAAgB,SAAC,GAAsE,IAArEC,EAAoE,EAApEA,QAASC,EAA2D,EAA3DA,gBAAiBC,EAA0C,EAA1CA,mBAAoBC,EAAsB,EAAtBA,iBACzE,OACI,mCACG,qBACKjD,UAAc+C,GAAmBD,EAAW,kBAAoB,WAChEzC,QAAU,kBAAK2C,GAAoBD,IAFxC,UAIK,sBACI/C,UAAU,aADd,UAGI,mBAAGA,UAAU,yBACb,6CAEI+C,EACM,mBAAG/C,UAAU,gCACb,mBAAGA,UAAU,mCAG3B,qBACIA,UAAY+C,EAAkB,0BAA4B,gBAD9D,UAGI,oBACI1C,QAAS,kBAAI4C,EAAiB,YADlC,SAGI,sBAAKjD,UAAU,aAAf,UACI,mBAAGA,UAAU,sBADjB,yBAIJ,oBACIK,QAAS,kBAAI4C,EAAiB,eADlC,SAGI,sBAAKjD,UAAU,aAAf,UACI,mBAAGA,UAAU,sBADjB,uBAIJ,oBACIK,QAAS,kBAAI4C,EAAiB,gBADlC,SAGI,sBAAKjD,UAAU,aAAf,UACI,mBAAGA,UAAU,sBADjB,kCCrCXkD,EAAuB,SAAC,GAAsE,IAArEC,EAAoE,EAApEA,YAAYC,EAAwD,EAAxDA,cAAcC,EAA0C,EAA1CA,iBAAiBC,EAAyB,EAAzBA,oBAErElB,EAAamB,aAAY,SAAAC,GAAK,OAAIA,EAAMhB,WAAxCJ,SAER,OACI,qBACIpC,UAAcoD,GAAiBD,EAAe,kBAAoB,WAClE9C,QAAU,kBAAKgD,GAAkBD,IAFrC,UAII,sBAAKpD,UAAU,aAAf,UACE,mBAAGA,UAAU,sBACb,2CACA,uBAAOA,UAAU,8BAAjB,SAAgDoC,EAASqB,YAE3D,oBAAIzD,UAAU,0BAAd,SAGQoC,EAASsB,KAAI,SAAAC,GAAE,OACb,oBAEEtD,QAAU,kBAAKiD,EAAoBK,IAFrC,SAIE,sBAAK3D,UAAU,aAAf,UACE,mBAAGA,UAAU,gBAAmB2D,EAAGC,UAJhCD,EAAGE,aCb1BC,GAA8B,CAAC,cAE/BC,GAAwB,CAC1BjB,SAAQ,EACRkB,SAAQ,EACRC,YAAW,EACXd,aAAY,GAGHe,GAAkB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAEVC,oBAAS,GAFC,mBAEvCvE,EAFuC,KAE3BC,EAF2B,OAGFsE,mBAAS,+BAHP,mBAGvCC,EAHuC,KAGvBtE,EAHuB,OAIAqE,oBAAS,GAJT,mBAIvCrB,EAJuC,KAItBC,EAJsB,OAKJoB,oBAAS,GALL,mBAKvChB,EALuC,KAKxBC,EALwB,OAOFe,mBAASL,IAPP,mBAOvCO,EAPuC,KAOvBC,EAPuB,KAQtCzB,EAA6CwB,EAA7CxB,QAASkB,EAAoCM,EAApCN,QAASC,EAA2BK,EAA3BL,WAAYd,EAAemB,EAAfnB,YAE9BqB,EAASjB,aAAY,SAAAC,GAAK,OAAIA,EAAMiB,QAApCD,KACAE,EAAanB,aAAY,SAAAC,GAAK,OAAIA,EAAMZ,QAAxC8B,SACFC,EAAWC,cAEjBC,qBAAU,WAEN,OAAQH,GACJ,IAAK,OACDH,EAAkB,2BACXR,IADU,IAEbC,SAAQ,KAEZ,MACJ,IAAK,aACDO,EAAkB,2BACXR,IADU,IAEbE,YAAW,QAMxB,CAACS,IAGJ,IAIMzB,EAAmB,SAAC6B,GACtBH,EAAShC,EAAkBmC,IAC3BH,EAASrC,MAGb,OACI,qBACItC,UAAamE,EAAgE,iEAAlD,iDAC3BN,GAAG,gBAFP,SAII,uBAAO7D,UAAU,eAAjB,SACI,sBAAKA,UAAU,wBAAf,UAGI,cAAC,EAAD,CACIH,WAAYA,EACZC,cAAeA,EACfC,kBAAmBA,IAGvB,qBACI8D,GAAG,+BACH7D,UAAYH,EAAawE,EAAiB,2BAC1CjE,gBAAgBP,EAHpB,SAKI,qBAAIG,UAAU,eAAd,UACI,oBAAIA,UAAU,SAAd,2BAII8D,GAA4BiB,QAAQP,IAAS,GAErC,cAAC,EAAD,CACI1B,QAAUA,EACVC,gBAAiBA,EACjBC,mBAAoBA,EACpBC,iBAAkBA,IAIlC,oBACIjD,UAAWgE,EAAU,iBAAmB,WACxC3D,QAAU,kBAAK4C,EAAiB,SAFpC,SAII,sBAAKjD,UAAU,aAAf,UACI,mBAAGA,UAAU,4BACb,uDAGR,oBACIA,UAAWiE,EAAa,iBAAmB,WAC3C5D,QAAU,kBAAK4C,EAAiB,eAFpC,SAII,sBAAKjD,UAAU,aAAf,UACI,mBAAGA,UAAU,kBACb,2DAIR,cAAC,EAAD,CACImD,YAAaA,EACbC,cAAgBA,EAChBC,iBAAmBA,EACnBC,oBAnEA,SAACK,GACzBgB,EJsDE,CACF1E,KAAMiC,EACNG,QIxD2BsB,oBCnDtBqB,GAAa,SAAC,GAAmC,IAAlCb,EAAiC,EAAjCA,YAAac,EAAoB,EAApBA,eAQrC,OACI,qBAAKjF,UAAU,cAAf,SAEJ,wBACgB6D,GAAG,eACH7D,UAAamE,EAAoB,SAAN,KAC3B9D,QAXQ,WACpB4E,GAAgBd,IAOpB,SAKgB,mBAAGnE,UAAU,oBCb3BQ,GAAUC,6CA4EVyE,GAAkB,SAAEC,GACtB,MAAM,CACFlF,KAAMiC,EACNG,QAAS8C,IAIXC,GAAqB,WACvB,MAAM,CACFnF,KAAMiC,IAMDmD,GAAmB,WAC5B,MAAM,CACFpF,KAAMiC,IC7FDoD,GAAc,WAAO,IAAD,EAEoB/B,aAAY,SAAAC,GAAK,OAAIA,EAAMiB,QAAhEc,EAFiB,EAEtBf,KAAmBgB,EAFG,EAEPC,IAAeC,EAFR,EAEQA,SAFR,EAIatB,oBAAS,GAJtB,mBAItBuB,EAJsB,KAIPC,EAJO,KAMvBjB,EAAWC,cAcjB,OACI,sBAAK5E,UAAU,eAAf,UAGI,qBAAKA,UAAU,kBAAf,SACR,6BACC,qBACmBA,UAAa2F,EAAkD,qCAAlC,gCADhD,UAGC,qBAEsB3F,UAAU,6BACVE,cAAY,WACZE,gBAAeuF,EACftF,QA1BF,SAACwF,GACnBA,EAAEC,iBAEFF,GAAkBD,IAkBpB,SAOC,sBAAK3F,UAAU,cAAf,UACC,sBAC4BA,UAAU,YADtC,SAE4B,qBACI+F,MAAO,CAACC,SAAS,IACjBC,IAAKT,EACLU,IAAI,WAGpC,sBAAKlG,UAAU,YAAf,UACC,4BAAI0F,IAEsC,eAAXH,EACM,iDACA,+CAGtC,mBAAGvF,UAAU,yBACb,mBAAGA,UAAU,uBACb,qBAAKA,UAAU,kBAGhB,oBAAIA,UAAU,wBAAd,SAIC,oBAC4BK,QAjDZ,WAChBsE,EDiDJ,uCAAO,WAAMA,GAAN,SAAAwB,EAAA,sDACH7E,aAAa8E,QAEbzB,EAASU,MAHN,2CAAP,uDChDIV,EAAShC,EAAkB,SAC3BgC,EAASrC,MA6CT,SAG4B,sBAAKtC,UAAU,aAAf,UACI,mBAAGA,UAAU,mBADjB,wBAQxB,qBAAKA,UAAU,WAAf,mBCzECqG,GAAe,SAAC,GAAmC,IAAlClC,EAAiC,EAAjCA,YAAac,EAAoB,EAApBA,eACvC,OACI,sBAAKjF,UAAU,gCAAf,UAGI,cAAC,GAAD,CACImE,YAAaA,EACbc,eAAgBA,IAIpB,cAAC,GAAD,IAEA,qBAAKjF,UAAU,iB,0DCddsG,I,OAAe,WAAO,IAEvBC,EAAahD,aAAa,SAAAC,GAAK,OAAIA,EAAMhB,WAAzC+D,SAER,OACI,qCACI,oBAAIvG,UAAU,qBAAd,SAAqCuG,EAAS3C,QAC9C,sBAAK5D,UAAU,sBAAf,UAEI,qBAAKA,UAAU,iBAAf,SACI,cAAC,KAAD,CACIA,UAAU,eACVc,IAAMyF,EAASC,UACfC,SAAO,EACPC,UAAQ,EACRC,MAAM,OACNC,OAAO,UAIX,qBAAK5G,UAAU,gBAAf,SAEI,sBAAKA,UAAU,OAAf,UACG,mBAAGA,UAAU,sBAAb,mBADH,IACkDuG,EAASM,yB,SCvBtEC,GAAc,SAAC,GAAe,IAAdtE,EAAa,EAAbA,QAEnBmC,EAAWC,cAMjB,OACI,mCACA,qBAAK5E,UAAU,2CAAf,SAEI,qBAAKA,UAAU,2BAAf,SACI,sBAAKA,UAAU,0BAAf,UAEI,wBAAQA,UAAU,iBAAlB,SACI,oBAAIA,UAAU,gCAAd,SAA+CwC,EAAQoB,UAE3D,oBAAI5D,UAAU,qBAEd,qBAAKA,UAAU,aAAf,SACI,qBAAIA,UAAU,OAAd,UACI,qBAAIA,UAAU,YAAd,UACI,yCAEIwC,EAAQuE,SAASrD,KAAK,SAAAsD,GAAO,OACzB,4BAGKA,EAAQC,MAFJD,EAAQnD,UAQ7B,qBAAI7D,UAAU,YAAd,UACI,+CACA,4BAAKwC,EAAQqE,iBAEjB,oBAAI7G,UAAU,YAAd,SACI,wBACIA,UAAU,gCACVK,QAtCX,WVqES,IAAE6G,EUpE5BvC,GVoE4BuC,EUpEA1E,EAAQqB,GVqExC,uCAAO,WAAMc,GAAN,iBAAAwB,EAAA,sEAEgB/E,EAAe,YAAD,OAAa8F,GAAa,GAAK,UAF7D,cAEGC,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEJ1C,EAASlC,EAAeyE,IACxBI,IAAKC,KAAK,KAAMtG,EAAKuG,IAAI,YAEzBF,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SAV7B,2CAAP,yDUlC4B,sBAMJ,qBAAKxH,UAAU,4BC9C9ByH,GAAyB,WAAO,IAElCrF,EAAYmB,aAAa,SAAAC,GAAK,OAAIA,EAAMhB,WAAxCJ,SAEP,OACI,mCAEI,qBAAKpC,UAAU,2BAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,+BAGQoC,EAASqB,OAAO,EAERrB,EAASsB,KAAK,SAAAlB,GAAO,OACjB,cAAC,GAAD,CAEIA,QAAWA,GADJA,EAAQqB,OAIvB,cAAC,KAAD,CACA6D,MAAOC,KAAMC,uBACb5H,UAAU,wB,UCzB1C6H,GAAWC,KAAXD,OAIKE,GAAgB,SAAC,GAAsC,IAArCnH,EAAoC,EAApCA,KAAMoH,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAW9C,OACI,mCACI,cAAC,KAAD,CACIC,KAAK,OACLnC,MAAO,CAAEY,MAAO,QAChBqB,YAAcA,EACdG,SAfS,SAACC,GAClB,IAAMC,EAAeD,EAAY1E,KAAI,SAAA1B,GAAG,OACpCpB,EAAK0H,MAAM,SAAAC,GAAO,OAAIA,EAAQ1E,KAAO7B,QAIzCiG,EAAYI,IAKR,SAOQzH,EAAK8C,KAAK,SAAC8E,GAAD,OACL,cAACX,GAAD,UAAsBW,EAAGvB,MAAZuB,EAAG3E,Y,QCzB5B4E,GAAU,WAAuD,IAAtDC,EAAqD,uDAAtC,CAACzB,KAAM,GAAG0B,MAAO,GAAGC,SAAU,IAAQ,EAE7CxE,mBAASsE,GAFoC,mBAElEG,EAFkE,KAE1DC,EAF0D,KAInEC,EAAQ,WACVD,EAAUJ,IAGRM,EAAoB,SAAC,GAAY,IAAXlE,EAAU,EAAVA,OACxBgE,EAAU,2BACHD,GADE,mBAEJ/D,EAAOmC,KAAOnC,EAAOmE,UAI9B,MAAO,CAACJ,EAAQG,EAAmBD,ICZ1BG,GAAqB,WAAO,IAE7BnC,EAAaxD,aAAa,SAAAC,GAAK,OAAIA,EAAMwD,WAAzCD,SACFpC,EAAWC,cAHmB,EAKW6D,GAAQ,CACnDU,aAAc,GACdC,WAAY,GACZC,mBAAqB,KARW,mBAK7BC,EAL6B,KAKjBN,EALiB,KAKED,EALF,KAU7BI,EAAiDG,EAAjDH,aAAcC,EAAmCE,EAAnCF,WAAYC,EAAuBC,EAAvBD,mBAVG,EAWOjF,mBAAS,IAXhB,mBAW7BmF,EAX6B,KAWXC,EAXW,OAaEpF,oBAAS,GAbX,mBAa7BqF,EAb6B,KAahBC,EAbgB,KAyCpC,OACI,mCACI,qBAAK1J,UAAU,2BAAf,SACI,qBAAKA,UAAU,OAAf,SAEI,sBAAKA,UAAU,cAAf,UAEI,oBAAIA,UAAU,wBAAd,8BAEA,uBACI2J,SApCC,SAAA9D,GAYrB,IdU4BrD,GcrB5BqD,EAAEC,iBAIuB,KAAtBqD,EAAaS,QAAmC,KAApBR,EAAWQ,QAA2C,KAA5BP,EAAmBO,QAA0C,IAA3BL,EAAiB9F,SAc7GkB,GdG6BnC,EcVL,CACnBoB,MAAOuF,EACP3C,UAAW4C,EACXvC,YAAawC,EACbtC,SAAUwC,GdOlB,uCAAO,WAAM5E,GAAN,uBAAAwB,EAAA,6DAEGY,EAAWvE,EAAQuE,SAASrD,KAAI,SAAAsD,GAElC,OAD8CA,EAAtC6C,QADqC,YACC7C,EADD,gBAK3C8C,EAPH,2BAQItH,GARJ,IASCuE,SAASvE,EAAQuE,SAASrD,KAAI,SAAAsD,GAAO,OAAIA,EAAQnD,QATlD,SAagBzC,EAAe,kBAAmB0I,EAAc,QAbhE,cAaG3C,EAbH,gBAcgBA,EAAKC,OAdrB,QAcGnG,EAdH,QAiBKoG,IACE0C,EADC,2BAEA9I,EAAKuB,SAFL,IAGHuE,aAEJpC,EAASpC,EAAewH,IACxBzC,IAAKC,KAAK,KAAMtG,EAAKuG,IAAI,YAGzBF,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SA1B7B,2CAAP,wDcDGuB,IACAS,EAAe,KAjBVE,GAAgB,IA+BA1J,UAAU,2CACVgK,YAAU,EAHd,UAKI,sBAAKhK,UAAU,YAAf,UAEI,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiBN,EAAgB,eAAiB,2BAClEnB,YAAY,oBACZf,KAAM,eACNgC,MAASE,EACThB,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,2DAOJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiBL,EAAc,eAAiB,2BAChEpB,YAAY,6DACZf,KAAM,aACNgC,MAASG,EACTjB,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,+DAMJ,sBAAKA,UAAU,aAAf,UAEI,cAAC,GAAD,CACIY,KAAQmG,EACRiB,YAAc,WACdC,YAAgBuB,IAEpB,qBACIxJ,UAAS,UAAOyJ,GAA0C,IAA3BF,EAAiB9F,OAAe,SAAW,wBAC1EsC,MAAO,CAACkE,SAAS,OAFrB,oDASJ,sBAAKjK,UAAU,aAAf,UACI,0BACIA,UAAS,UAAOyJ,GAAiBJ,EAAsB,eAAiB,2BACxErB,YAAY,mCACZf,KAAM,qBACNgC,MAAQI,EACRlB,SAAYa,IAGhB,qBAAKhJ,UAAU,mBAAf,sEAQR,qBAAKA,UAAU,WAAf,SACI,qBAAKA,UAAU,aAAf,SACI,uBACIC,KAAK,SACLD,UAAU,uBACViJ,MAAM,uB,8BCzHjCiB,I,qBAAa,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,cAG3BC,EAAsBF,EAAtBE,SAAUC,EAAYH,EAAZG,QAqBlB,OACI,qCACI,uBACIzG,GAAG,gBACH5D,KAAK,OACLgH,KAAK,OACLlB,MAAO,CAACwE,QAAQ,QAChBpC,SAtBY,SAAAtC,GACpB,IAAM2E,EAAM3E,EAAEf,OAAO2F,MAAM,GACrBC,EAAYC,IAAIC,gBAAgBJ,GAEnCA,GAECJ,EAAc,CACVC,UAAU,EACVC,QAASE,EACTK,QAASH,OAeb,qBACI1K,UAAU,WACVK,QA9BQ,WAChByK,SAASC,cAAc,kBAAkBC,SA2BrC,SAKQX,EACEC,EAAQrD,KACT,qCAAE,mBAAGjH,UAAU,uBAAf,2BC5CfQ,GAAUC,6CA2BHwK,GAAkB,SAAC9F,GAC5B,8CAAO,WAAMR,GAAN,qBAAAwB,EAAA,sEAEgB3E,EAAuB,iBAAkB2D,EAAM,QAF/D,cAEGgC,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IACEhG,EAAQC,aAAaC,QAAQ,SAE7B2J,EAHC,2BAIAjK,EAAK4I,SAJL,IAKHpE,IAAI,GAAD,OAAIjF,GAAJ,6BAAkCS,EAAK4I,QAAQpE,IAAMxE,EAAK4I,QAAQpE,IAAM,gBAAxE,kBAAkGpE,KAIzGsD,EAASwG,GAAqBD,IAG9BvG,EAASyG,GAAkBF,IAE3B5D,IAAKC,KAAK,KAAM,2BAA2B,YAE3CD,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SArB7B,2CAAP,uDA0BS6D,GAAkB,SAACC,GAC5B,8CAAO,WAAM3G,GAAN,mBAAAwB,EAAA,6DACGxF,EADH,gBACuB2K,GADvB,SAEgBlK,EAAgBT,EAAU,GAAI,UAF9C,cAEGwG,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAMKoG,IAGJ1C,EAAS4G,GAAkBD,IAC3BhE,IAAKC,KAAK,KAAMtG,EAAKuG,IAAI,YAEzBF,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SAZ7B,2CAAP,uDAuBEgE,GAAoB,SAAEC,GACxB,MAAM,CACFxL,KAAMiC,EACNG,QAASoJ,IAGXN,GAAsB,SAAEhG,GAC1B,MAAM,CACFlF,KAAMiC,EACNG,QAAS8C,IASXiG,GAAmB,SAAEjG,GACvB,MAAM,CACFlF,KAAMiC,EACNG,QAAS8C,IAGXoG,GAAmB,SAAED,GACvB,MAAM,CACFrL,KAAMiC,EACNG,QAASiJ,ICPXI,GAAkB,SAAE3E,GACtB,MAAM,CACF9G,KAAMiC,EACNG,QAAS0E,IAUX4E,GAAiB,SAAE3E,GACrB,MAAM,CACF/G,KAAMiC,EACNG,QAAS2E,IAGX4E,GAAiB,SAAE/H,GACrB,MAAM,CACF5D,KAAMiC,EACNG,QAASwB,ICnHXgI,GAAkB,CACpBC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,UAAW,GACXC,aAAc,GACdC,cAAe,GACfC,UAAW,GACXC,YAAa,IAEXC,GAAiB,CACnBjC,UAAU,EACVC,QAAQ,GACRO,QAAS,MAGA0B,GAAqB,WAAO,IAAD,EAEW9D,GAAQoD,IAFnB,mBAE7BvC,EAF6B,KAEjBN,EAFiB,KAEED,EAFF,KAG7B+C,EAA8FxC,EAA9FwC,SAASC,EAAqFzC,EAArFyC,SAASC,EAA4E1C,EAA5E0C,UAAWC,EAAiE3C,EAAjE2C,UAAUC,EAAuD5C,EAAvD4C,aAAcE,EAAyC9C,EAAzC8C,UAAWC,EAA8B/C,EAA9B+C,YAAaF,EAAiB7C,EAAjB6C,cAHhD,EAII/H,mBAAS,OAJb,mBAI7BoI,EAJ6B,KAIfC,EAJe,OAKDrI,mBAASkI,IALR,mBAK7BnC,EAL6B,KAKlBC,EALkB,KAM7BE,EAAoBH,EAApBG,QAASO,EAAWV,EAAXU,QAEVlG,EAAWC,cARmB,EAUER,oBAAS,GAVX,mBAU7BqF,EAV6B,KAUhBC,EAVgB,KA+CpC,OACI,mCACI,qBAAK1J,UAAU,2BAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,iCAEA,uBACI2J,SA3CC,SAAC9D,GDCI,IAACmB,GCA3BnB,EAAEC,iBAGmB,KAAlBgG,EAASlC,QAAiC,KAAlBmC,EAASnC,SAAgB8C,KAAUC,QAAQX,EAAUpC,SAA8B,KAAnBqC,EAAUrC,QAAesC,EAAatC,SAASuC,EAAcvC,QAA8B,KAAnBwC,EAAUxC,QAAoC,KAArByC,EAAYzC,aAAgCgD,IAAjBJ,GAA8BA,EAAa/I,QAAU,GACxQiG,GAAgB,IAMpB/E,GDV2BqC,ECUC,CACxBC,KAAM6E,EACNlI,MAAOqI,EACPY,QAASR,EACTS,MAAOV,EACPW,SAAUP,EACV3C,QAAQ,CACJ5C,KAAM6E,EACNpG,SAAUqG,EACVnD,SAAUsD,EACVvD,MAAOqD,EACPgB,QAAS1C,EACT9F,KAAM,cDrBlB,uCAAO,WAAMG,EAAUsI,GAAhB,qBAAA9G,EAAA,sEAIGxB,EAASsG,GAAiBjE,EAAQ6C,UAJrC,YAKIqD,EAAcD,IAAW9H,KAAzB+H,YALJ,wBAQOC,EARP,2BASQnG,GATR,IAUK6C,QAAQ,eACDqD,KAXZ,SAgBoB9L,EAAe,iBAAkB+L,EAAa,QAhBlE,cAgBOhG,EAhBP,iBAiBoBA,EAAKC,OAjBzB,SAiBOnG,EAjBP,QAmBSoG,GAGJ1C,EAASgH,GAAe,2BACjB1K,EAAK+F,SADW,IAEnB6C,QAAQ,eACDqD,OAKX5F,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SA9BjC,QAkCH7C,EDsBE,CACF1E,KAAMiC,ICzDH,4CAAP,0DC0BI6G,IACAqB,EAAckC,MAeMtM,UAAU,2CACVgK,YAAU,EAHd,UAKI,sBAAKhK,UAAU,qBAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiBqC,EAAY,eAAiB,2BAC9D9D,YAAY,SACZf,KAAM,WACNgC,MAAQ6C,EACR3D,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,2DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiBsC,EAAY,eAAiB,2BAC9D/D,YAAY,gDACZf,KAAM,WACNgC,MAAO8C,EACP5D,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,4DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAMyJ,GAAeiD,KAAUC,QAAQX,GAAc,eAAiB,2BAC/EhE,YAAY,SACZf,KAAM,YACNgC,MAAO+C,EACP7D,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,qDAKJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAMyJ,GAAkByC,GAAgBA,EAAazI,OAAS,EAAO,eAAiB,2BAC/FuE,YAAY,gBACZf,KAAM,eACNgC,MAAOiD,EACP/D,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,yEAKJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAMyJ,GAAkB0C,GAAiBA,EAAc1I,OAAS,GAAK0I,IAAkBD,EAAkB,eAAiB,2BACnIlE,YAAY,mCACZf,KAAM,gBACNgC,MAAOkD,EACPhE,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,mDAOR,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiBwC,EAAa,eAAiB,2BAC/DjE,YAAY,mCACZf,KAAM,YACNgC,MAAOgD,EACP9D,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,8DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiB2C,EAAa,eAAiB,2BAC/DpE,YAAY,yBACZf,KAAM,YACNgC,MAAOmD,EACPjE,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,yDAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiB4C,EAAe,eAAiB,2BACjErE,YAAY,UACZf,KAAM,cACNgC,MAAOoD,EACPlE,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,4DAIJ,sBAAKA,UAAU,aAAf,UACI,cAAC,KAAD,CACIoN,eAAa,EACbpN,UAAS,UAAMyJ,GAAkB+C,GAAgBA,EAAa/I,QAAU,EAAO,GAAK,cACpF4J,eAAe,KACfpE,MAAOuD,EACPrE,SAAWsE,IAEf,qBAAKzM,UAAU,mBAAf,yDAMJ,cAAC,GAAD,CACImK,UAAYA,EACZC,cAAiBA,OAMzB,sBAAKpK,UAAU,qBAAf,UAGI,qBAAKA,UAAU,aAAf,SACI,uBACIC,KAAK,SACLD,UAAU,uBACViJ,MAAM,UAKR4B,GAEM,qBACI3E,IAAI,SACJD,IAAM4E,EACN9E,MAAO,CACHC,SAAU,GACVsH,UAAW,sB,kBCzOvDC,GAAWC,KAAXD,OAEKE,GAA0B,WACnC,IAAM9I,EAAWC,cACTmC,EAAaxD,aAAa,SAAAC,GAAK,OAAIA,EAAMwD,WAAzCD,SAGF2G,EAAmB,SAAC7H,EAAD,GAAa,IFoEPhC,EAAIyH,EEpENtJ,EAAQ,EAARA,IACnB2L,EAAY3L,EACZ4L,EAAa7G,EAASuB,MAAM,SAAAtB,GAAO,OAAIA,EAAQnD,KAAO7B,KAAK6H,QAAQyB,IACzE3G,GFiE2Bd,EEjEC8J,EFiEGrC,EEjEQsC,EFkE3C,uCAAO,WAAMjJ,GAAN,mBAAAwB,EAAA,6DACG0H,EADH,kBACgChK,GADhC,SAEgBzC,EAAgByM,EAAiB,GAAI,UAFrD,cAEG1G,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEJ1C,EAASiH,GAAgB/H,IAGzBc,EAAS0G,GAAiBC,KAI1BhE,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SAd7B,2CAAP,yDE9DA,OACI,mCACI,qBAAKxH,UAAU,2BAAf,SAEI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,kCAEA,eAAC,KAAD,CACI8N,WACI/G,EAASrD,KAAK,SAAAsD,GAAO,MACb,CACIhF,IAAKgF,EAAQnD,GACboD,KAAMD,EAAQC,KACdrD,MAAOoD,EAAQpD,MACfkJ,MAAO9F,EAAQ8F,MACfD,QAAS7F,EAAQ6F,QACjBE,SAAU/F,EAAQ+F,aAKlCgB,OAAQ,CAAEC,EAAG,KAdjB,UAgBI,cAACT,GAAD,CAAQ3J,MAAM,SAASqK,UAAU,OAAkBtH,MAAM,KAAKuH,MAAM,QAAxB,QAC5C,cAACX,GAAD,CAAQ3J,MAAM,YAASqK,UAAU,SAAY,SAC7C,cAACV,GAAD,CAAQ3J,MAAM,OAAOqK,UAAU,SAAY,SAC3C,cAACV,GAAD,CAAQ3J,MAAM,UAAOqK,UAAU,WAAc,WAC7C,cAACV,GAAD,CAAQ3J,MAAM,WAAWqK,UAAU,YAAe,YAClD,cAACV,GAAD,CACI3J,MAAM,YAENuK,OAAS,SAACC,EAAMC,GAAP,OACL,wBACIrO,UAAU,gCACVK,QAAU,SAACwF,GAAD,OAAK6H,EAAiB7H,EAAEwI,IAFtC,sBAFA,uBC7CvBC,GAAmB,WAG5B,OACI,qCACI,oBAAItO,UAAU,qBAAd,uCAGA,cAAC,GAAD,IAGA,cAAC,GAAD,IAIA,cAAC,GAAD,IAGA,cAAC,GAAD,QClBNQ,GAAUC,6CAyEV8N,GAAsB,SAAEC,GAC1B,MAAM,CACFvO,KAAMiC,EACNG,QAASmM,IAcXC,GAAqB,SAAEC,GACzB,MAAM,CACFzO,KAAMiC,EACNG,QAASqM,IAGXC,GAAqB,SAAEC,GACzB,MAAM,CACF3O,KAAMiC,EACNG,QAASuM,I,mBCpGTC,GAASC,KAATD,KAEKE,GAAc,SAAC,GAA+J,IAA5J1E,EAA2J,EAA3JA,SAAU2E,EAAiJ,EAAjJA,OAAiJ,IAAxIC,qBAAwI,MAA1H,YAA0H,EAAhHC,EAAgH,EAAhHA,UAAWC,EAAqG,EAArGA,QAAqG,IAA5FC,oBAA4F,MAA/E,iBAA+E,EAAjEC,EAAiE,EAAjEA,SAAiE,IAAvDC,cAAuD,SAAzCC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,UAGrK,OACI,mCACI,eAAC,KAAD,CAEIC,WAAS,EACTC,MACItF,EACK,qBAAKnE,IAAKiJ,EAASlJ,IAAK+I,IACxB,cAAC,KAAD,CAAOtH,MAAOC,KAAMC,yBAE7BvH,QAAUoP,EARd,UAUI,cAACZ,GAAD,CACIjL,MAAK,UAAKqL,EAAL,aAAuBC,GAC5BrI,YAAW,UAAKuI,EAAL,aAAsBC,KAIjCC,GAEI,cAAC,KAAD,CACItP,UAAU,mBACVC,KAAK,OACL2P,QAAM,EACNvP,QAAUmP,EAJd,SAMKD,UC7BhBM,GAAmB,WAAO,IAE3BrB,EAAYjL,aAAY,SAAAC,GAAK,OAAIA,EAAMkL,UAAvCF,QACF7J,EAAWC,cAEXkL,EAAoB,SAAEC,GF+CC,IAAClM,EE7C1Bc,GF6C0Bd,EE7CCkM,EF8C/B,uCAAO,WAAMpL,GAAN,mBAAAwB,EAAA,6DACG6J,EADH,iBAC8BnM,GAD9B,SAEgBzC,EAAgB4O,EAAgB,GAAI,UAFpD,cAEG7I,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEJ1C,EAASgK,GAAoB9K,IAE7ByD,IAAKC,KAAK,KAAMtG,EAAKuG,IAAI,YAEzBF,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SAX7B,2CAAP,yDE1CA,OACI,mCACI,qBAAKxH,UAAU,2BAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,gCAEA,qBAAKA,UAAU,MAAf,SACQwO,EAAQ/K,OAAO,EACN+K,EAAQ9K,KAAK,SAAAgL,GAAM,OAChB,qBACI1O,UAAU,uCADd,SAII,cAAC,GAAD,CACIqK,UAAU,EACV2E,OAAQN,EAAOjJ,IACfyJ,UAAWR,EAAO9K,MAClBuL,QAAST,EAAOxI,IAChBmJ,SAAUX,EAAOuB,KACjBX,QAAQ,EACRC,WAAW,WACXC,WAAa,kBAAIM,EAAmBpB,EAAO7K,QAV1C6K,EAAO7K,OAgBpB,cAAC,KAAD,CACI6D,MAAOC,KAAMC,uBACb5H,UAAU,0BCxChDkQ,GAAwB,CAC1B7F,UAAU,EACVC,QAAQ,GACRO,QAAS,MAGAsF,GAAkB,WAAO,IAAD,EAEE/L,mBAAS8L,IAFX,mBAE1B/F,EAF0B,KAEfC,EAFe,KAG1BE,EAA6BH,EAA7BG,QAAQD,EAAqBF,EAArBE,SAAUQ,EAAWV,EAAXU,QAHQ,EAKcpC,GAAQ,CACnDwD,UAAW,GACXkD,QAAS,GACTiB,SAAU,KARmB,mBAK1B9G,EAL0B,KAKdN,EALc,KAKKD,EALL,KAU1BkD,EAAgC3C,EAAhC2C,UAAWkD,EAAqB7F,EAArB6F,QAASiB,EAAY9G,EAAZ8G,SAErBzL,EAAWC,cA2BjB,OACI,mCACI,qBAAK5E,UAAU,2BAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,2BACA,uBACI2J,SAhCC,SAAC9D,GAUtB,IHJ2B6I,GGL3B7I,EAAEC,iBAGoB,KAAnBmG,EAAUrC,QAAgC,KAAjBuF,EAAQvF,QAAgC,KAAjBuF,EAAQvF,QAAgBS,IAc3E1F,GHZ2B+J,EGIX,CACZ1B,QAAS1C,EACT1G,MAAOqI,EACP/F,IAAKiJ,EACLc,KAAMG,GHPd,uCAAO,WAAMzL,GAAN,qBAAAwB,EAAA,sEAEgB3E,EAAuB,wBAAyBkN,EAAS,QAFzE,cAEGvH,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IACEhG,EAAQC,aAAaC,QAAQ,SAE7B8O,EAHC,2BAIApP,EAAKyN,QAJL,IAKHjJ,IAAI,GAAD,OAAIjF,GAAJ,4BAAiCS,EAAKyN,OAAOjJ,IAAMxE,EAAKyN,OAAOjJ,IAAM,WAArE,kBAA0FpE,KAGjGsD,EAAS8J,GAAmB4B,IAC5B/I,IAAKC,KAAK,KAAM,8BAA8B,YAE9CD,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SAhB7B,2CAAP,wDGaIuB,IACAqB,EAAc8F,KAhBV5I,IAAKC,KAAK,QAAQ,0DAA2D,UA4B7DvH,UAAU,uBACVgK,YAAU,EAHd,UAKI,qBAAKhK,UAAU,iDAAf,SACI,cAAC,GAAD,CACIqK,SAAUA,EACV2E,OAAQnE,EACRqE,UAAWjD,EACXkD,QAASA,EACTE,SAAUe,MAGlB,sBAAKpQ,UAAU,qBAAf,UAEI,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAU,eACVgI,YAAY,YACZf,KAAM,YACNgC,MAASgD,EACT9D,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,2DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAU,eACVgI,YAAY,oBACZf,KAAM,UACNgC,MAAQkG,EACRhH,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,2DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAU,eACVgI,YAAY,iBACZf,KAAM,WACNgC,MAAQmH,EACRjI,SAAYa,IAEhB,qBAAKhJ,UAAU,mBAAf,2DAIJ,cAAC,GAAD,CACImK,UAAWA,EACXC,cAAeA,IAEnB,qBAAKpK,UAAU,kBAAf,SACI,uBACIC,KAAK,SACLD,UAAU,iCACViJ,MAAM,mCCtHjCqH,GAAoB,WAC7B,OACI,qCACI,oBAAItQ,UAAU,qBAAd,2CAGA,cAAC,GAAD,IAGA,cAAC,GAAD,QCLNuQ,GAAuB,CACzBC,aAAc,GACdC,aAAc,GACdC,cAAe,GACfC,iBAAkB,GAClBC,qBAAsB,GACtBC,aAAc,aAIZX,GAAwB,CAC1B7F,UAAU,EACVC,QAAQ,GACRO,QAAS,MAIAiG,GAAe,WAExB,IAAMnM,EAAWC,cAFa,EAKiB6D,GAAQ8H,IALzB,mBAKvBjH,EALuB,KAKXN,EALW,KAKQD,EALR,KAMvByH,EAAmGlH,EAAnGkH,aAAcC,EAAqFnH,EAArFmH,aAAcC,EAAuEpH,EAAvEoH,cAAeC,EAAwDrH,EAAxDqH,iBAAkBC,EAAsCtH,EAAtCsH,qBAAsBC,EAAgBvH,EAAhBuH,aAN5D,EAQKzM,mBAAS8L,IARd,mBAQvB/F,EARuB,KAQZC,EARY,KASvBE,EAA6BH,EAA7BG,QAAQD,EAAqBF,EAArBE,SAAUQ,EAAWV,EAAXU,QATK,EAWQzG,oBAAS,GAXjB,mBAWvBqF,EAXuB,KAWVC,EAXU,KAwC9B,OACI,mCACI,qBAAK1J,UAAU,2BAAf,SAEI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,kCAEA,uBACI2J,SApCC,SAAC9D,GACtBA,EAAEC,iBAGuB,KAAtB0K,EAAa5G,QAAqC,KAAtB6G,EAAa7G,QAAsC,KAAvB8G,EAAc9G,QAAyC,KAA1B+G,EAAiB/G,QAA6C,KAA9BgH,EAAqBhH,QAAqC,KAAtBiH,EAAajH,QAAgB8C,KAAUC,QAAQ+D,EAAc9G,SAAW+G,EAAiB/G,SAAUgH,EAAqBhH,QAOpRF,GAAgB,GAChB/E,EAASsG,GAAgB,CACrBhE,KAAMwJ,EACN/K,SAAU8K,EACV7H,MAAO+H,EACP9H,SAAU+H,EACVnM,KAAMqM,EACN7D,QAAS1C,KAIbvB,IACAqB,EAAc8F,KAlBVxG,GAAgB,IAgCA1J,UAAU,uBACVgK,YAAU,EAHd,UAKI,sBAAKhK,UAAU,WAAf,UACI,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAOyJ,GAAiB+G,EAAgB,eAAiB,2BAClExI,YAAY,UACZf,KAAM,eACNgC,MAASuH,EACTrI,SAAWa,IAGf,qBAAKhJ,UAAU,mBAAf,4DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,OACLD,UAAS,UAAMyJ,GAAiBgH,EAAgB,eAAiB,2BACjEzI,YAAY,kBACZf,KAAM,eACNgC,MAASwH,EACTtI,SAAWa,IAGf,qBAAKhJ,UAAU,mBAAf,2DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,QACLD,UAAS,UAAMyJ,GAAeiD,KAAUC,QAAQ+D,GAAkB,eAAiB,2BACnF1I,YAAY,SACZf,KAAM,gBACNgC,MAASyH,EACTvI,SAAWa,IAGf,qBAAKhJ,UAAU,mBAAf,mDAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,WACLD,UAAS,UAAMyJ,GAAkBkH,GAAoBA,EAAiBlN,OAAS,EAAO,eAAiB,2BACvGuE,YAAY,gBACZf,KAAM,mBACNgC,MAAS0H,EACTxI,SAAWa,IAGf,qBAAKhJ,UAAU,mBAAf,4DAIJ,sBAAKA,UAAU,aAAf,UACI,uBACIC,KAAK,WACLD,UAAS,UAAMyJ,GAAkBmH,GAAwBA,EAAqBnN,OAAS,GAAKmN,IAAyBD,EAAsB,eAAiB,2BAC5J3I,YAAY,0BACZf,KAAM,uBACNgC,MAAS2H,EACTzI,SAAWa,IAGf,qBAAKhJ,UAAU,mBAAf,gDAIJ,sBAAKA,UAAU,aAAf,UACI,yBACIA,UAAS,UAAOyJ,GAAiBoH,EAAgB,6BAA+B,yCAChF5J,KAAM,eACNgC,MAAS4H,EACT1I,SAAWa,EAJf,UAOI,wBAAQ+H,UAAQ,EAAC9H,MAAM,GAAvB,mCACA,wBAAQA,MAAM,YAAd,sBACA,wBAAQA,MAAM,aAAd,8BAEJ,qBAAKjJ,UAAU,mBAAf,qDAKR,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAAC,GAAD,CACIqK,SAAUA,EACV2E,OAAQnE,EACRoE,cAAc,SACdC,UAAWuB,EACXtB,QAASsB,EACTrB,aAAa,SACbC,SAAUqB,MAGlB,qBAAK1Q,UAAU,aAAf,SACI,cAAC,GAAD,CACImK,UAAWA,EACXC,cAAeA,MAGvB,qBAAKpK,UAAU,aAAf,SACI,uBACIC,KAAK,SACLD,UAAU,mCACViJ,MAAM,mCCtLtCsE,GAAWC,KAAXD,OAGKyD,GAAe,WAExB,IAAMrM,EAAWC,cACT6G,EAAUlI,aAAa,SAAAC,GAAK,OAAIA,EAAM2B,QAAtCsG,MAQR,OACI,mCACI,qBAAKzL,UAAU,2BAAf,SAEI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UACI,oBAAIA,UAAU,wBAAd,kCAEA,eAAC,KAAD,CACI8N,WACIrC,EAAM/H,KAAK,SAAAyB,GAAI,MACP,CACInD,IAAKmD,EAAKmG,IACVrE,KAAM9B,EAAK8B,KACX0B,MAAOxD,EAAKwD,MACZnE,KAAMW,EAAKX,SAI3BuJ,OAAQ,CAAEC,EAAG,KAXjB,UAaI,cAAC,GAAD,CAAQpK,MAAM,SAASqK,UAAU,OAAkBtH,MAAM,KAAKuH,MAAM,QAAxB,QAC5C,cAAC,GAAD,CAAQtK,MAAM,QAAQqK,UAAU,SAAY,SAC5C,cAAC,GAAD,CAAQrK,MAAM,OAAOqK,UAAU,QAAW,QAC1C,cAAC,GAAD,CACIrK,MAAM,YAENuK,OAAS,SAACC,EAAMC,GAAP,OACL,wBACIrO,UAAU,gCACVK,QAAU,SAACwF,GAAD,OAnCrB,SAACA,EAAD,GAAa,IAAT7D,EAAQ,EAARA,IACzB2C,EAAS0G,GAAgBrJ,IAkCsB0L,CAAiB7H,EAAEwI,IAFtC,sBAFA,uBC3CvB4C,I,OAAU,WACnB,OACI,mCACI,qBAAKjR,UAAU,kCAAf,SAEI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,oCAAf,SACQ,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,8BCRlCkR,GAAgB,WAEzB,IAAMvM,EAAWC,cACTuM,EAAY5N,aAAa,SAAAC,GAAK,OAAIA,EAAM2B,QAAxCgM,SAMR,OAJAtM,qBAAU,WACNF,EbDJ,uCAAO,WAAMA,GAAN,qBAAAwB,EAAA,sEAEgB/E,EAAe,kBAF/B,cAEG+F,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEEhG,EAAQC,aAAaC,QAAQ,SAC7B6P,EAAiBnQ,EAAKoQ,SAAS3N,KAAK,SAAAyB,GAAI,kCACvCA,GADuC,IAE1CM,IAAI,GAAD,OAAIjF,GAAJ,6BAAkC2E,EAAKM,IAAMN,EAAKM,IAAM,gBAAxD,kBAAkFpE,QAGzFsD,EAAS6G,GAAkB4F,MAE3BzM,EAAS6G,GAAkB,KAC3B8F,QAAQC,IAAItQ,EAAKuG,MAhBlB,2CAAP,yDaEG,CAAC7C,IAEDwM,EAEK,qCACA,oBAAInR,UAAU,qBAAd,yCACA,cAAC,GAAD,OAMJ,qCACI,oBAAIA,UAAU,qBAAd,yCAGA,cAAC,GAAD,IAGA,cAAC,GAAD,Q,UC7BJwR,GAAUC,KAAVD,MAGKE,GAAkB,WAAO,IAI5BC,EAFepO,aAAY,SAAAC,GAAK,OAAIA,EAAMhB,WAAxCJ,SAEqBsB,KAAK,SAAAlB,GAAO,MACrC,CACIqB,GAAIrB,EAAQqB,GACZD,MAAOpB,EAAQoB,MACfgO,YAAapP,EAAQqE,gBAO7B,OACI,mCACI,qBAAK7G,UAAU,2BAAf,SAEI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,oBAAIA,UAAU,wBAAd,+BAGJ,qBAAKA,UAAU,YAAf,SAEQ2R,EAAalO,OAAO,EAEZ,cAAC,KAAD,CAAUoO,WAAS,EAAnB,SAEIF,EAAajO,KAAK,SAACoO,EAAOC,GAAR,OAElB,cAACP,GAAD,CAAOQ,OAASF,EAAKlO,MAArB,SACA,4BAAIkO,EAAKF,eADyBG,EAAE,QAOxC,cAAC,KAAD,CACIrK,MAAOC,KAAMC,uBACb5H,UAAU,wBC1C5CiS,GAAU,CACZ,CACErO,MAAO,SACPqK,UAAW,SACXjM,IAAK,SACLkM,MAAO,OACPvH,MAAO,KAET,CACE/C,MAAO,YACPqK,UAAW,SACXjM,IAAK,UAEP,CACE4B,MAAO,UACPqK,UAAW,OACXjM,IAAK,QAEP,CACE4B,MAAO,OACPqK,UAAW,OACXjM,IAAK,SAIEkQ,GAAe,WAAO,IAI3BtR,EAFa2C,aAAa,SAAAC,GAAK,OAAIA,EAAMwD,WAAxCD,SAEcrD,KAAK,SAAAsD,GAAO,MAC/B,CACEhF,IAAKgF,EAAQnD,GACbsO,OAAQnL,EAAQC,KAChBmL,OAAQpL,EAAQpD,MAChByO,KAAMrL,EAAQ6F,QACdyF,KAAMtL,EAAQ8F,UAIlB,OACI,mCACI,qBAAK9M,UAAU,2BAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,cAAf,SACI,oBAAIA,UAAU,wBAAd,yBAGJ,qBAAKA,UAAU,YAAf,SACI,cAAC,KAAD,CACEiS,QAASA,GACTnE,WAAYlN,EACZ2R,WAAa,CAACC,SAAU,GACxBzE,OAAQ,CAAEC,EAAG,iBCvDxByE,GAAa,WACtB,OACI,qCACI,oBAAIzS,UAAU,qBAAd,+CAEA,cAAC,GAAD,IAEA,cAAC,GAAD,Q,UCJC0S,GAAsB,WAAO,IAAD,EAEHnP,aAAY,SAAAC,GAAK,OAAIA,EAAMkL,UAArDF,EAF6B,EAE7BA,QAASmE,EAFoB,EAEpBA,aACXhO,EAAWC,cAHoB,EAKGR,oBAAS,GALZ,mBAK9BwO,EAL8B,KAKhBC,EALgB,KAO/BC,EAAY,SAAClE,GACfjK,EZsE6B,SAAEiK,GACnC,MAAM,CACF3O,KAAMiC,EACNG,QAASuM,GYzEAmE,CAAsBnE,IAC/BiE,GAAgB,IAGdG,EAAc,WAChBH,GAAgB,GAChBlO,EZuEE,CACF1E,KAAMiC,KYrEV,OACI,qCACI,oBAAIlC,UAAU,qBAAd,gCAEA,qBAAKA,UAAU,2BAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,cAAf,UAGI,qBAAKA,UAAU,MAAf,SACQwO,EAAQ/K,OAAO,EACN+K,EAAQ9K,KAAK,SAAAgL,GAAM,OAChB,qBACI1O,UAAU,uCADd,SAII,cAAC,GAAD,CACIqK,UAAU,EACV2E,OAAQN,EAAOjJ,IACfyJ,UAAWR,EAAO9K,MAClBuL,QAAST,EAAOxI,IAChBmJ,SAAUX,EAAOuB,KACjBR,UAAW,kBAAIqD,EAAUpE,EAAO7K,QAR/B6K,EAAO7K,OAcpB,cAAC,KAAD,CACI6D,MAAOC,KAAMC,uBACb5H,UAAU,gBAO9B,cAAC,KAAD,CACI4D,MAAM,oBACN+C,MAAO,IACPsM,UAAQ,EACRC,QAASN,EACTO,KAAMH,EACNI,SAAUJ,EANd,WASUL,GAEE,cAAC,GAAD,CACItI,UAAU,EACV2E,OAAQ2D,EAAalN,IACrByJ,UAAWyD,EAAa/O,MACxBuL,QAASwD,EAAazM,IACtBmJ,SAAUsD,EAAa1C,oBCpElDoD,GAAa,WAAO,IAErB9M,EAAahD,aAAY,SAAAC,GAAK,OAAIA,EAAMhB,WAAxC+D,SACA7B,EAAanB,aAAY,SAAAC,GAAK,OAAIA,EAAMZ,QAAxC8B,SAIR,GAAiB,OAAd6B,EAEC,OAAQ7B,GACJ,IAAK,OACD,OAAO,cAAC,GAAD,IACX,IAAK,UACD,OAAO,cAAC,GAAD,IACX,IAAK,aACD,OAAO,cAAC,GAAD,IACX,IAAK,cACD,OAAO,cAAC,GAAD,IACX,IAAK,aACD,OAAO,cAAC,GAAD,IACX,QACI,OAAO,cAAC,GAAD,IAMnB,OACI,mCACI,cAAC,GAAD,OCnCC4O,I,OAAe,WACxB,OACI,qBAAKtT,UAAU,SAAS+F,MAAO,CAACwN,SAAU,QAASC,OAAQ,GAA3D,uFCaKC,GAAsB,WAAO,IAAD,EAECrP,oBAAS,GAFV,mBAE9BD,EAF8B,KAEjBc,EAFiB,KAIpByO,EAAoBnQ,aAAa,SAAAC,GAAK,OAAIA,EAAMhB,WAAzD2O,SACSwC,EAAqBpQ,aAAa,SAAAC,GAAK,OAAIA,EAAMwD,WAA1DmK,SACSyC,EAAoBrQ,aAAa,SAAAC,GAAK,OAAIA,EAAMkL,UAAzDyC,SACFxM,EAAWC,cASjB,OAPAC,qBAAU,WACNF,EnBdJ,uCAAO,WAAMA,GAAN,mBAAAwB,EAAA,sEAEgB/E,EAAe,WAF/B,cAEG+F,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAMKoG,IACEN,EAAW9F,EAAK8F,SAASrD,KAAK,SAAAsD,GAAO,kCACpCA,GADoC,IAEvC6C,QAAQ,CACJyB,IAAKtE,EAAQ6C,QAAQgK,IACrB5M,KAAMD,EAAQ6C,QAAQ5C,KACtBvB,SAAUsB,EAAQ6C,QAAQ5C,KAC1B0B,MAAO3B,EAAQ6C,QAAQlB,MACvBnE,KAAMwC,EAAQ6C,QAAQrF,KACtBiB,IAAKuB,EAAQ6C,QAAQpE,KAAO,SAIpCd,EAAS+G,GAAgB3E,MAEzBpC,EAAS+G,GAAgB,KACzB4F,QAAQC,IAAItQ,EAAKuG,MAtBlB,2CAAP,uDmBeI7C,EpClBJ,uCAAO,WAAMA,GAAN,mBAAAwB,EAAA,sEAEgB/E,EAAe,YAF/B,cAEG+F,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEEyM,EAAe7S,EAAKmB,SAASsB,KAAK,SAAAC,GAAE,kCAE/BA,GAF+B,IAGlCoD,SAAUpD,EAAGoD,SAASrD,KAAK,SAAAsD,GAAW,IAC3B6M,EAAiB7M,EAAjB6M,IAAQE,EADkB,YACT/M,EADS,SAEjC,OAAO,aACHnD,GAAGgQ,GACAE,WAOnBpP,EAASxC,EAAgB2R,KAIzBnP,EAASxC,EAAgB,KAzB1B,2CAAP,uDoCmBIwC,EflBJ,uCAAO,WAAMA,GAAN,qBAAAwB,EAAA,sEAEgB/E,EAAe,eAF/B,cAEG+F,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IACEhG,EAAQC,aAAaC,QAAQ,SAC7ByS,EAAmB/S,EAAKuN,QAAQ9K,KAAK,SAAAgL,GAAM,kCAC1CA,GAD0C,IAE7CjJ,IAAI,GAAD,OAAIjF,GAAJ,4BAAiCkO,EAAOjJ,IAAMiJ,EAAOjJ,IAAM,WAA3D,kBAAgFpE,QAIvFsD,EAAS4J,GAAoByF,MAE7BrP,EAAS4J,GAAoB,KAC7B+C,QAAQC,IAAItQ,EAAKuG,MAhBlB,2CAAP,yDeoBG,CAAC7C,IAED+O,GAAmBC,GAAoBC,EAElC,mCACI,cAAC,GAAD,MAMR,qBACI5T,UAAamE,EAAiC,0CAAnB,kBAD/B,SAGI,sBAAKnE,UAAU,eAAf,UAEF,cAAC,GAAD,CACUmE,YAAaA,IAIjB,cAAC,GAAD,CACIA,YAAaA,EACbc,eAAgBA,IAIpB,qBAAKpB,GAAG,eAAR,SACI,qBAAK7D,UAAU,YAAf,SACI,cAAC,GAAD,QAOR,cAAC,GAAD,UC/DHiU,GAAY,WAAO,IAAD,EAEaxL,GAAQ,CAC5CE,MAAO,GACPC,SAAS,KAJc,mBAEpBU,EAFoB,KAERN,EAFQ,KAMnBL,EAAoBW,EAApBX,MAAQC,EAAYU,EAAZV,SAEVjE,EAAWC,cAWjB,OACI,uBACI5E,UAAU,cACV2J,SAZa,SAAA9D,GACjBA,EAAEC,iBAKFnB,E/BVkB,SAACgE,EAAMC,GAC7B,8CAAO,WAAMjE,GAAN,iBAAAwB,EAAA,sEAEgBzF,EAAkB,OAAQ,CAACiI,QAAMC,YAAW,QAF5D,cAEGzB,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEJ/F,aAAa4S,QAAQ,QAASjT,EAAKI,OACnCC,aAAa4S,QAAQ,mBAAmB,IAAIC,MAAOC,WAGnDzP,EAASO,GAAgB,CACrBoG,IAAKrK,EAAK4I,QAAQyB,IAClBrE,KAAMhG,EAAK4I,QAAQ5C,KACnBvB,SAAUzE,EAAK4I,QAAQnE,SACvBiD,MAAO1H,EAAK4I,QAAQlB,MACpBnE,KAAMvD,EAAK4I,QAAQrF,KACnBiB,IAAI,GAAD,OAAKjF,GAAL,6BAAmCS,EAAK4I,QAAQpE,IAAMxE,EAAK4I,QAAQpE,IAAM,gBAAzE,kBAAmGxE,EAAKI,WAI/GiG,IAAKC,KAAK,QAAStG,EAAKuG,IAAI,SArB7B,2CAAP,sD+BSa6M,CAAW1L,EAAOC,KAI3B,UAII,sBAAK5I,UAAU,aAAf,UACI,sBAAMA,UAAU,iBAAiBsU,cAAY,SAC7C,uBACIrU,KAAK,QACLgH,KAAK,QACLe,YAAY,QACZuM,SAAS,WACTtL,MAASN,EACTR,SAAYa,OAGpB,sBAAKhJ,UAAU,aAAf,UACI,sBAAMA,UAAU,YAAYsU,cAAY,SACxC,uBACIrU,KAAK,WACLgH,KAAK,WACLe,YAAY,gBACZuM,SAAS,WACTtL,MAASL,EACTT,SAAYa,OAGpB,sBAAKhJ,UAAU,wBAAf,UACI,wBAAOA,UAAU,gBAAjB,UACI,uBAAOC,KAAK,aACZ,sBAAMD,UAAU,cAChB,mBAAGA,UAAU,WAAb,2BAEJ,wBAAQA,UAAU,mBAAlB,4BCnDHwU,I,cAAc,WACvB,OACI,qBAAKxU,UAAU,2BAAf,SACI,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,mDAEA,cAAC,GAAD,IAEA,oBAAGA,UAAU,SAAb,yCACI,mBAAGO,KAAK,eAAeP,UAAU,aAAjC,2BAKR,qBAAKA,UAAU,aAAf,SACI,mHChBPyU,GAAe,SAAC,GAItB,IAHHC,EAGE,EAHFA,SACWC,EAET,EAFFC,UACGb,EACD,wCAGF,OACI,cAAC,IAAD,2BAAYA,GAAZ,IACIa,UAAY,SAACC,GAAD,OACNH,EACM,cAACC,EAAD,eAAgBE,IAChB,cAAC,IAAD,CAAUC,GAAG,SAASC,OAAK,SCZtCC,GAAc,SAAC,GAIrB,IAHHN,EAGE,EAHFA,SACWC,EAET,EAFFC,UACGb,EACD,wCAEF,OACI,cAAC,IAAD,2BAAYA,GAAZ,IACIa,UAAY,SAACC,GAAD,OACLH,EAEK,cAAC,IAAD,CAAUI,GAAG,UAAUC,OAAK,IAD5B,cAACJ,EAAD,eAAgBE,SCD3BI,GAAY,WAIrB,IAAMtQ,EAAWC,cAJU,EAMHrB,aAAY,SAAAC,GAAK,OAAIA,EAAMiB,QAA5C0M,EANoB,EAMpBA,SAAU7F,EANU,EAMVA,IAOjB,OALAzG,qBAAU,WACNF,EnCiBJ,uCAAO,WAAMA,GAAN,iBAAAwB,EAAA,sEAEgB/E,EAAe,cAF/B,cAEG+F,EAFH,gBAGgBA,EAAKC,OAHrB,QAGGnG,EAHH,QAKKoG,IAEJ/F,aAAa4S,QAAQ,QAASjT,EAAKI,OACnCC,aAAa4S,QAAQ,mBAAmB,IAAIC,MAAOC,WAGnDzP,EAASO,GAAgB,CACrBoG,IAAKrK,EAAK4I,QAAQyB,IAClBrE,KAAMhG,EAAK4I,QAAQ5C,KACnBvB,SAAUzE,EAAK4I,QAAQnE,SACvBiD,MAAO1H,EAAK4I,QAAQlB,MACpBnE,KAAMvD,EAAK4I,QAAQrF,KACnBiB,IAAI,GAAD,OAAKjF,GAAL,6BAAmCS,EAAK4I,QAAQpE,IAAMxE,EAAK4I,QAAQpE,IAAM,gBAAzE,kBAAmGxE,EAAKI,WAI/GsD,EAASS,MArBV,2CAAP,yDmCfG,CAACT,IAEDwM,EACQ,cAAC,GAAD,IAIP,cAAC,IAAD,UACI,8BAEI,eAAC,IAAD,WACA,cAAC,GAAD,CACIuD,WAAcpJ,EACdyJ,OAAK,EACLG,KAAK,UACLN,UAAcnB,KAElB,cAAC,GAAD,CACIiB,WAAcpJ,EACdyJ,OAAK,EACLG,KAAK,SACLN,UAAYJ,KAGhB,cAAC,IAAD,CACIO,OAAK,EACLD,GAAK,mB,4BC9CnBpM,GAAe,CACjByI,UAAU,G,SCDRzI,GAAe,CACjByI,UAAS,EACT/O,SAAS,GAyBTmE,SAAS,MC3BPmC,GAAe,CACjBhE,SAAU,QCDRgE,GAAe,CACjByI,UAAS,EACT3C,QAAQ,GASRmE,aAAa,MCVXjK,GAAe,CACjByI,UAAU,EACVpK,SAAS,GAmBToO,cAAe,MCtBbzM,GAAe,CACjByI,UAAU,EACV1F,MAAM,GAUNyB,WAAY,MCLHkI,GAAeC,aAAgB,CACxC5Q,KNCuB,WAAiC,IAAhCjB,EAA+B,uDAAxBkF,GAAc4G,EAAU,uCAEvD,OAAQA,EAAOrP,MACX,KAAKiC,EACD,OAAO,uCACAsB,GACA8L,EAAOjN,SAFd,IAGI8O,UAAU,IAElB,KAAKjP,EACD,OAAO,2BACAsB,GADP,IAEI2N,UAAU,IAElB,KAAKjP,EACD,MAAO,CACHiP,UAAU,GAElB,QACI,OAAO3N,IMnBfhB,QLqB0B,WAAiC,IAAhCgB,EAA+B,uDAAxBkF,GAAc4G,EAAU,uCAE1D,OAAQA,EAAOrP,MACX,KAAKiC,EACD,OAAO,2BACAsB,GADP,IAEI2N,UAAU,EACV/O,SAAS,aACFkN,EAAOjN,WAGtB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEI+C,SAAU+I,EAAOjN,UAEzB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEI+C,SAAU,OAElB,KAAKrE,EACD,OAAO,2BACAsB,GADP,IAEIpB,SAAS,aACFoB,EAAMpB,SAASkT,QAAQ,SAAA3R,GAAE,OAAIA,EAAGE,KAAOyL,EAAOjN,cAG7D,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEIpB,SAAS,GAAD,oBACDoB,EAAMpB,UADL,CAEJkN,EAAOjN,YAGnB,QACI,OAAOmB,IKzDfZ,KJNuB,WAAiC,IAAhCY,EAA+B,uDAAxBkF,GAAc4G,EAAU,uCAEvD,OAAQA,EAAOrP,MACX,KAAKiC,EACD,OAAO,2BACAsB,GADP,IAEIkB,SAAU4K,EAAOjN,UAEzB,QACI,OAAOmB,IIFf2B,KDIuB,WAAiC,IAAhC3B,EAA+B,uDAAxBkF,GAAc4G,EAAU,uCAEvD,OAAQA,EAAOrP,MACX,KAAKiC,EACD,OAAO,2BACAsB,GADP,IAEI2N,UAAU,EACV1F,MAAM,aACC6D,EAAOjN,WAGtB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEI0J,WAAYoC,EAAOjN,UAE3B,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEI0J,WAAY,OAEpB,KAAKhL,EACD,OAAO,2BACAsB,GADP,IAEIiI,MAAM,GAAD,oBACEjI,EAAMiI,OADR,CAED6D,EAAOjN,YAGnB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEIiI,MAAOjI,EAAMiI,MAAM6J,QACf,SAAAnQ,GAAI,OAAGA,EAAKmG,MAAOgE,EAAOjN,aAGtC,QACI,OAAOmB,ICxCfwD,QFc0B,WAAiC,IAAhCxD,EAA+B,uDAAxBkF,GAAc4G,EAAU,uCAE1D,OAAQA,EAAOrP,MACX,KAAKiC,EACD,OAAO,2BACAsB,GADP,IAEI2N,UAAU,EACVpK,SAAS,aACFuI,EAAOjN,WAGtB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEI2R,cAAe7F,EAAOjN,UAE9B,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEIuD,SAAS,GAAD,oBACDvD,EAAMuD,UADL,CAEJuI,EAAOjN,YAGnB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEIuD,SAAUvD,EAAMuD,SAASuO,QACrB,SAAAtO,GAAO,OAAGA,EAAQnD,KAAMyL,EAAOjN,aAG3C,QACI,OAAOmB,IE7CfkL,OHCyB,WAAiC,IAAhClL,EAA+B,uDAAxBkF,GAAc4G,EAAU,uCAEzD,OAAQA,EAAOrP,MACX,KAAKiC,EACD,OAAO,2BACAsB,GADP,IAEI2N,UAAU,EACV3C,QAAQ,aACDc,EAAOjN,WAGtB,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEImP,aAAcnP,EAAMgL,QAAQlG,MAAK,SAAAoG,GAAM,OAAIA,EAAO7K,KAAOyL,EAAOjN,aAExE,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEImP,aAAc,OAEtB,KAAKzQ,EACD,OAAO,2BACAsB,GADP,IAEIgL,QAAQ,aACDhL,EAAMgL,QAAQ8G,QAAQ,SAAA5G,GAAM,OAAIA,EAAO7K,KAAOyL,EAAOjN,cAGpE,KAAKH,EACD,OAAO,2BACAsB,GADP,IAEIgL,QAAQ,GAAD,oBACAhL,EAAMgL,SADN,CAEHc,EAAOjN,YAGnB,QACI,OAAOmB,MInDb+R,GAAsC,qBAAXC,QAA0BA,OAAOC,sCAAyCC,KAE9FC,GAAQC,aACjBR,GACAG,GACIM,aAAgBC,QCJXC,GAAM,WACjB,OACE,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,GAAD,OCNNK,IAAS7H,OACP,cAAC,GAAD,IACArD,SAASmL,eAAe,W","file":"static/js/main.90e1d3fc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const AsideHeader = ({movilAside, setmovilAside, setcollapsinStyle}) => {\r\n\r\n  const handleMovilDropDown = ()=>{\r\n    setmovilAside(!movilAside)\r\n\r\n    if (movilAside) {\r\n      setcollapsinStyle(\"navbar-collapse collapsing\")\r\n      setTimeout(() => {\r\n        setcollapsinStyle(\"navbar-collapse collapse in\")\r\n      }, 800);\r\n      \r\n    }\r\n  }\r\n\r\n    return (\r\n        <div className=\"navbar-header\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"navbar-toggle collapsed\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\".collapse\"\r\n              aria-expanded=\"false\"\r\n              onClick={ handleMovilDropDown }\r\n            >\r\n              <span className=\"sr-only\">Toggle navigation</span>\r\n              <span className=\"icon-bar\"></span>\r\n              <span className=\"icon-bar\"></span>\r\n              <span className=\"icon-bar\"></span>\r\n            </button>\r\n            <h1>\r\n              <a className=\"navbar-brand\" href=\"#!\">\r\n                <i className=\"fas fa-running\"></i>\r\n                Evento\r\n                <span className=\"dashboard_text\">CubaMotricidad 2020</span>\r\n              </a>\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n","const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\nexport const fetchWithoutToken = ( endpoint, data, method = 'GET' )=>{\r\n\r\n    const url = `${baseUrl}/${ endpoint }`; // localhost:3500/api/endpoint\r\n\r\n    if ( method === 'GET' ){\r\n        return fetch( url )\r\n    } else{\r\n        return fetch( url,  {\r\n            method: method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify( data )\r\n        })\r\n    }\r\n} \r\n\r\nexport const fetchWithToken = ( endpoint, data, method = 'GET' )=>{\r\n    \r\n    const url = `${baseUrl}/${ endpoint }`; // localhost:3500/api/endpoint\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    if ( method === 'GET' ){\r\n        return fetch( url, {\r\n            method: method,\r\n            headers: {\r\n                'token': token,\r\n            },\r\n            body: JSON.stringify( data )\r\n        } )\r\n    } else{\r\n        return fetch( url,  {\r\n            method: method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'token': token,\r\n            },\r\n            body: JSON.stringify( data )\r\n        })\r\n    }\r\n}\r\n\r\nexport const fetchWithTokenFormData = ( endpoint, data, method = 'GET' )=>{\r\n    \r\n    const url = `${baseUrl}/${ endpoint }`; // localhost:3500/api/endpoint\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    const formData = getFormData(data)\r\n\r\n\r\n    if ( method === 'GET' ){\r\n        return fetch( url, {\r\n            method: method,\r\n            headers: {\r\n                'token': token,\r\n            },\r\n            body: JSON.stringify( data )\r\n        } )\r\n    } else{\r\n        return fetch( url,  {\r\n            method: method,\r\n            headers: {\r\n                'token': token,\r\n            },\r\n            body: formData\r\n        })\r\n    }\r\n}\r\n\r\nconst getFormData= (object) => {\r\n    const formData = new FormData();\r\n    Object.keys(object).forEach(key => formData.append(key, object[key]));\r\n    return formData;\r\n}","\r\n\r\nexport const types = {\r\n    \r\n    //AUTH\r\n    authCheckingFinish: '[Auth] Finish checking login state',\r\n    authStartTokenRenew: '[Auth] Start Token Renew',\r\n    \r\n    authStartLogin: '[Auth] Start login',\r\n    authLogin: '[AUTH] Login',\r\n    authLogout: '[AUTH] Logout',\r\n\r\n\r\n    //USER\r\n    userSetActive: '[USER] Set Active User',\r\n    userUnSetActive: '[USER] UnSet Active User',\r\n\r\n    userStartRegister: '[USER] Start User Register',\r\n    userRegister: '[USER] User Register',\r\n\r\n    userStartListChecking: '[USER] Start Check User List',\r\n    userListCheckingFinish: '[USER] Check User List',\r\n    \r\n    userStartDelete: '[USER] Start User Delete',\r\n    userDelete: '[USER] User Delete',\r\n\r\n    \r\n    //SPEAKER\r\n    spSetActive: '[SPEAKER] Set Active Speaker',\r\n    \r\n    spStartRegister: '[SPEAKER] Start Speaker Register',\r\n    spRegister: '[SPEAKER] Speaker Register',\r\n\r\n    spStartListChecking: '[SPEAKER] Start Check Speaker List',\r\n    spListCheckingFinish: '[SPEAKER] Speakers List Checked ',\r\n\r\n    spStartDelete: '[SPEAKER] Start Speaker Delete',\r\n    spDelete: '[SPEAKER] Speaker Delete',\r\n\r\n\r\n    //CHANNEL\r\n    chSetActive: '[CHANNEL] Set Active Channel',\r\n    chUnSetActive: '[CHANNEL] UnSet Active Channel',\r\n\r\n    chStartListChecking: '[CHANNEL] Start Check Channels List',\r\n    chListCheckingFinish: '[CHANNEL] Channels List Checked ',\r\n\r\n    chAddNew: '[CHANNEL] Add New Channel',\r\n    chRemove: '[CHANNEL] Remove Channel',\r\n\r\n\r\n    //PAGE\r\n    pgSetActivePage: '[Page] Set Active Page',\r\n\r\n\r\n    //POSTER\r\n    posterSetActive: '[POSTER] Set Active Poster',\r\n    posterUnSetActive: '[POSTER] UnSet Active Poster',\r\n\r\n    posterStartListChecking: '[POSTER] Start Check Poster List',\r\n    posterListCheckingFinish: '[POSTER] Posters List Checked ',\r\n\r\n    posterAddNew: '[POSTER] Add New Poster',\r\n    posterRemove: '[POSTER] Remove Poster'\r\n\r\n\r\n}","/*************************************\r\n*         [CHANNEL]  ACTIONS            *\r\n**************************************/\r\nimport { fetchWithToken } from \"../../helpers/fetchJWT\";\r\nimport { types } from \"../types/types\";\r\nimport Swal from 'sweetalert2'\r\n\r\n/*\r\n    MIDDLESWARE\r\n*/\r\nexport const startCheckingChannelList = () =>{\r\n    return async(dispatch)=>{\r\n        \r\n        const resp = await fetchWithToken('channels')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n            \r\n            const channelsList = body.channels.map( ch => (\r\n                {\r\n                    ...ch,\r\n                    speakers: ch.speakers.map( speaker=> {\r\n                        const{ _id, ...rest } = speaker                    \r\n                        return {\r\n                            id:_id,\r\n                            ...rest\r\n                        }\r\n                    } )\r\n                }\r\n     \r\n            ))\r\n    \r\n            dispatch(chGetListAction(channelsList))\r\n\r\n\r\n        }else{\r\n            dispatch(chGetListAction([]))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport const startAddNewChannel = ( channel ) =>{\r\n    return async(dispatch)=>{\r\n\r\n        const speakers = channel.speakers.map(speaker => {\r\n            const { usuario, ...speakerWithoutUserInfo} = speaker\r\n            return speakerWithoutUserInfo   \r\n        })\r\n\r\n        const channelToDB = {\r\n            ...channel,\r\n            speakers:channel.speakers.map(speaker => speaker.id)\r\n        }\r\n\r\n        \r\n        const resp = await fetchWithToken('channels/create', channelToDB , 'POST')\r\n        const body = await resp.json()\r\n\r\n\r\n        if(body.ok){\r\n            const channelToReducer ={\r\n                ...body.channel,\r\n                speakers\r\n            }\r\n            dispatch(chAddNewAction(channelToReducer))\r\n            Swal.fire('OK', body.msg,'success')\r\n\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const startDeleteChannel = ( channelID ) =>{\r\n    return async(dispatch)=>{\r\n\r\n        const resp = await fetchWithToken(`channels/${channelID}`, {} , 'DELETE')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n\r\n            dispatch(chDeleteAction(channelID))\r\n            Swal.fire('OK', body.msg,'success')\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/*\r\n    ACTIONS\r\n*/\r\nconst chGetListAction = ( channels )=>{\r\n    return{\r\n        type: types.chListCheckingFinish,\r\n        payload: channels\r\n    }\r\n}\r\nexport const chSetActiveAction = ( channel )=>{\r\n    return{\r\n        type: types.chSetActive,\r\n        payload: channel\r\n    }\r\n}\r\nexport const chUnSetActiveAction = ( )=>{\r\n    return{\r\n        type: types.chUnSetActive,\r\n    }\r\n}\r\nconst chAddNewAction = ( channel )=>{\r\n    return{\r\n        type: types.chAddNew,\r\n        payload: channel\r\n    }\r\n}\r\nconst chDeleteAction = ( chID )=>{\r\n    return{\r\n        type: types.chRemove,\r\n        payload: chID\r\n    }\r\n}\r\n","/*************************************\r\n*         [PAGE]  ACTIONS            *\r\n**************************************/\r\nimport { types } from \"../types/types\";\r\n\r\n\r\n/*\r\n    MIDDLESWARE\r\n*/\r\n\r\n\r\n\r\n/*\r\n    ACTIONS\r\n*/\r\nexport const pgSetActiveAction = ( page )=>{\r\n    return{\r\n        type: types.pgSetActivePage,\r\n        payload: page\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const AsideDasboard = ({dashTag, dashboardActive, setdashboardActive, handleSelectItem}) => {\r\n    return (\r\n        <>\r\n           <li \r\n                className= { (dashboardActive || dashTag) ? \"treeview active\" : \"treeview\" }\r\n                onClick={ ()=> setdashboardActive(!dashboardActive)}\r\n            >\r\n                <div\r\n                    className=\"anchor-div\"\r\n                >                  \r\n                    <i className=\"fa fa-dashboard pr-2\"></i>\r\n                    <span>Dashboard</span>\r\n                    {\r\n                        dashboardActive \r\n                            ? <i className=\"fa fa-angle-down pull-right\"></i>\r\n                            : <i className=\"fa fa-angle-left pull-right\"></i>\r\n                    }\r\n                </div>\r\n                <ul \r\n                    className={ dashboardActive ? \"treeview-menu menu-open\" : \"treeview-menu\" }\r\n                >\r\n                    <li\r\n                        onClick={()=>handleSelectItem('dashReg')}\r\n                    >\r\n                        <div className=\"anchor-div\">\r\n                            <i className=\"fa fa-angle-right\"></i>Registro Usuarios\r\n                        </div>\r\n                    </li>\r\n                    <li\r\n                        onClick={()=>handleSelectItem('dashConfig')}\r\n                    >\r\n                        <div className=\"anchor-div\">\r\n                            <i className=\"fa fa-angle-right\"></i>Configuraciones\r\n                        </div>\r\n                    </li>\r\n                    <li\r\n                        onClick={()=>handleSelectItem('dashGallery')}\r\n                    >\r\n                        <div className=\"anchor-div\">\r\n                            <i className=\"fa fa-angle-right\"></i>Editar Galería\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n               \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const AsideChannelSelector = ({channelsTag,channelActive,setchannelActive,handleSelectChannel}) => {\r\n\r\n    const { channels } = useSelector(state => state.channel)\r\n\r\n    return (\r\n        <li \r\n            className= { (channelActive || channelsTag) ? \"treeview active\" : \"treeview\" }\r\n            onClick={ ()=> setchannelActive(!channelActive)}\r\n        >\r\n            <div className=\"anchor-div\">\r\n              <i className=\"fas fa-video pr-2\"></i>\r\n              <span>Salones</span>\r\n              <small className=\"label pull-right label-info\">{channels.length}</small>\r\n            </div>\r\n            <ul className=\"treeview-menu menu-open\">\r\n\r\n                {\r\n                    channels.map(ch =>(\r\n                      <li \r\n                        key={ch.id}\r\n                        onClick={ ()=> handleSelectChannel(ch) }\r\n                      >\r\n                        <div className=\"anchor-div\">\r\n                          <i className=\"fa fa-video\"></i>{ch.title}\r\n                        </div>\r\n                      </li>\r\n                    ))\r\n                }\r\n                  \r\n            </ul>\r\n        </li>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { AsideHeader } from \"./AsideHeader\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { chSetActiveAction, chUnSetActiveAction } from \"../../../redux/actions/chActions\";\r\nimport { pgSetActiveAction } from \"../../../redux/actions/pageActions\";\r\nimport { AsideDasboard } from \"./AsideDasboard\";\r\nimport { AsideChannelSelector } from \"./AsideChannelSelector\";\r\n\r\nconst roleDasboardAccessWhiteList = ['ADMIN_ROLE']\r\n\r\nconst tagsStyleInitialState = {\r\n    dashTag:false,\r\n    infoTag:false,\r\n    galleryTag:false,\r\n    channelsTag:false,\r\n}\r\n\r\nexport const AsideMenuScreen = ({toggleAside}) => {\r\n\r\n    const [movilAside, setmovilAside] = useState(false)\r\n    const [collapsinStyle, setcollapsinStyle] = useState(\"navbar-collapse collapse in\")\r\n    const [dashboardActive, setdashboardActive] = useState(false)\r\n    const [channelActive, setchannelActive] = useState(false)\r\n\r\n    const [AsidetagActive, setAsidetagActive] = useState(tagsStyleInitialState)\r\n    const { dashTag, infoTag, galleryTag, channelsTag} = AsidetagActive\r\n\r\n    const { role } = useSelector(state => state.auth)\r\n    const { activePg } = useSelector(state => state.page)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        \r\n        switch (activePg) {\r\n            case 'info':\r\n                setAsidetagActive({\r\n                    ...tagsStyleInitialState,\r\n                    infoTag:true\r\n                })\r\n                break;\r\n            case 'posterPage':\r\n                setAsidetagActive({\r\n                    ...tagsStyleInitialState,\r\n                    galleryTag:true\r\n                })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [activePg])\r\n\r\n    \r\n    const handleSelectChannel = (ch)=>{\r\n        dispatch(chSetActiveAction(ch))\r\n    }\r\n\r\n    const handleSelectItem = (target)=>{\r\n        dispatch(pgSetActiveAction(target))\r\n        dispatch(chUnSetActiveAction()) \r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={ !toggleAside ? 'cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left' :'cbp-spmenu cbp-spmenu-vertical cbp-spmenu-left cbp-spmenu-open'} \r\n            id=\"cbp-spmenu-s1\"\r\n        >\r\n            <aside className=\"sidebar-left\">\r\n                <nav className=\"navbar navbar-inverse\">\r\n\r\n                    {/* ASIDE HEADER */}\r\n                    <AsideHeader\r\n                        movilAside={movilAside} \r\n                        setmovilAside={setmovilAside}\r\n                        setcollapsinStyle={setcollapsinStyle}\r\n                    />\r\n\r\n                    <div\r\n                        id=\"bs-example-navbar-collapse-1\"\r\n                        className={ movilAside ? collapsinStyle : \"collapse navbar-collapse\"}\r\n                        aria-expanded={ movilAside }\r\n                    >\r\n                        <ul className=\"sidebar-menu\">\r\n                            <li className=\"header\">NAVEGACIÓN</li>\r\n\r\n                            {/* ASIDE DASBOARD SELECTOR */}\r\n                            {\r\n                                roleDasboardAccessWhiteList.indexOf(role) >= 0\r\n                                    &&\r\n                                        <AsideDasboard\r\n                                            dashTag= {dashTag}\r\n                                            dashboardActive={dashboardActive}\r\n                                            setdashboardActive={setdashboardActive}\r\n                                            handleSelectItem={handleSelectItem}\r\n                                        />\r\n                            }\r\n\r\n                            <li \r\n                                className={infoTag ? \"treeview ative\" : \"treeview\"}\r\n                                onClick={ ()=> handleSelectItem('info')  }  \r\n                            >\r\n                                <div className=\"anchor-div\">\r\n                                    <i className=\"fas fa-info-circle pr-2\"></i>\r\n                                    <span>Información</span>\r\n                                </div>\r\n                            </li>\r\n                            <li \r\n                                className={galleryTag ? \"treeview ative\" : \"treeview\"}\r\n                                onClick={ ()=> handleSelectItem('posterPage')  }  \r\n                            >\r\n                                <div className=\"anchor-div\">\r\n                                    <i className=\"fa fa-th pr-2\"></i>\r\n                                    <span>Posters del Evento</span>\r\n                                </div>\r\n                            </li>\r\n\r\n                            <AsideChannelSelector\r\n                                channelsTag={channelsTag}\r\n                                channelActive={ channelActive }\r\n                                setchannelActive={ setchannelActive }\r\n                                handleSelectChannel={ handleSelectChannel }\r\n                            />\r\n                        </ul>\r\n                  </div>\r\n                </nav>\r\n            </aside>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nAsideMenuScreen.propTypes = {\r\n  toggleAside: PropTypes.bool.isRequired \r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const StickyLeft = ({toggleAside, settoggleAside}) => {\r\n\r\n    \r\n    const handleHideAside = ()=>{\r\n        settoggleAside(!toggleAside)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"header-left\">\r\n            {/* <!--toggle button start--> */}\r\n\t\t\t\t<button \r\n                    id=\"showLeftPush\" \r\n                    className={ !toggleAside ? null :'active'}\r\n                    onClick={ handleHideAside }\r\n                >\r\n                    <i className=\"fa fa-bars\"></i>\r\n                </button>\r\n\t\t\t{/* <!--toggle button end--> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nStickyLeft.propTypes = {\r\n    toggleAside: PropTypes.bool.isRequired,\r\n    settoggleAside: PropTypes.func.isRequired \r\n}\r\n\r\n\r\n","/*************************************\r\n*         [AUTH]  ACTIONS            *\r\n**************************************/\r\nimport { types } from \"../types/types\";\r\nimport { fetchWithoutToken, fetchWithToken } from \"../../helpers/fetchJWT\";\r\nimport Swal from 'sweetalert2'\r\nconst baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n/*\r\n    MIDDLESWARE\r\n*/\r\nexport const startLogin = (email,password) =>{\r\n    return async(dispatch)=>{\r\n        \r\n        const resp = await fetchWithoutToken('auth', {email,password}, 'POST')\r\n        const body = await resp.json()\r\n        \r\n        if(body.ok){\r\n            //grabar token en localStorage\r\n            localStorage.setItem('token', body.token)\r\n            localStorage.setItem('token-init-date', new Date().getTime())\r\n\r\n            //Dispatch login\r\n            dispatch(authLoginAction({\r\n                uid: body.usuario.uid,\r\n                name: body.usuario.name,\r\n                userName: body.usuario.userName,\r\n                email: body.usuario.email,\r\n                role: body.usuario.role,\r\n                img: `${baseUrl}/picture/usuarios/${!!body.usuario.img ? body.usuario.img : 'no-user-image' }?token=${body.token}`\r\n            }))\r\n\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const startCheckingAction = ()=>{\r\n    return async(dispatch) =>{\r\n\r\n        const resp = await fetchWithToken('auth/renew')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n            //grabar token en localStorage\r\n            localStorage.setItem('token', body.token)\r\n            localStorage.setItem('token-init-date', new Date().getTime())\r\n\r\n            //Dispatch login\r\n            dispatch(authLoginAction({\r\n                uid: body.usuario.uid,\r\n                name: body.usuario.name,\r\n                userName: body.usuario.userName,\r\n                email: body.usuario.email,\r\n                role: body.usuario.role,\r\n                img: `${baseUrl}/picture/usuarios/${!!body.usuario.img ? body.usuario.img : 'no-user-image' }?token=${body.token}`\r\n            }))\r\n\r\n        }else{\r\n            dispatch(authCheckingAction())\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const startLogout = () =>{\r\n    return async(dispatch)=>{\r\n        localStorage.clear()\r\n\r\n        dispatch(authLogoutAction())\r\n\r\n    }\r\n}\r\n\r\n\r\n/*\r\n    ACTIONS\r\n*/\r\nconst authLoginAction = ( user )=>{\r\n    return{\r\n        type: types.authLogin,\r\n        payload: user\r\n    }\r\n}\r\n\r\nconst authCheckingAction = ()=>{\r\n    return{\r\n        type: types.authCheckingFinish,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const authLogoutAction = ()=>{\r\n    return{\r\n        type: types.authLogout\r\n    }\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startLogout } from '../../../redux/actions/authActions';\r\nimport { chUnSetActiveAction } from '../../../redux/actions/chActions';\r\nimport { pgSetActiveAction } from '../../../redux/actions/pageActions';\r\n\r\nexport const StickyRight = () => {\r\n\r\n    const {role:userRole, img:userImage, userName} = useSelector(state => state.auth)\r\n\r\n    const [toggleProfile, settoggleProfile] = useState(false)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDropdown =(e)=>{\r\n        e.preventDefault();\r\n        \r\n        settoggleProfile(!toggleProfile)\r\n    }\r\n\r\n    const handleLogout= ()=>{\r\n        dispatch(startLogout())\r\n        dispatch(pgSetActiveAction('info'))\r\n        dispatch(chUnSetActiveAction())\r\n    }\r\n\r\n    return (\r\n        <div className=\"header-right\">\r\n\r\n\r\n            <div className=\"profile_details\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li \r\n                        className={ !toggleProfile ? \"dropdown profile_details_drop\" : \"dropdown profile_details_drop open\"}    \r\n                    >\r\n\t\t\t\t\t\t<div\r\n                            \r\n                            className=\"dropdown-toggle anchor-div\" \r\n                            data-toggle=\"dropdown\" \r\n                            aria-expanded={toggleProfile}\r\n                            onClick ={ handleDropdown }\r\n                        >\r\n\t\t\t\t\t\t\t<div className=\"profile_img\">\r\n\t\t\t\t\t\t\t\t<span \r\n                                    className=\"prfil-img\">\r\n                                    <img\r\n                                        style={{maxWidth:45}} \r\n                                        src={userImage} \r\n                                        alt=\"user\"\r\n                                    /> \r\n                                </span>\r\n\t\t\t\t\t\t\t\t<div className=\"user-name\">\r\n\t\t\t\t\t\t\t\t\t<p>{userName}</p>\r\n\t\t\t\t\t\t\t\t\t{\r\n                                        userRole==='ADMIN_ROLE'\r\n                                            ? <span>Administrador</span>\r\n                                            : <span>Invitado</span>\r\n                                    }\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-angle-down lnr\"></i>\r\n\t\t\t\t\t\t\t\t<i className=\"fa fa-angle-up lnr\"></i>\r\n\t\t\t\t\t\t\t\t<div className=\"clearfix\"></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<ul className=\"dropdown-menu drp-mnu\">\r\n\t\t\t\t\t\t\t\t{/* <li> <div className=\"anchor-div\"><i className=\"fa fa-cog\"></i> Settings</div> </li>\r\n\t\t\t\t\t\t\t\t<li> <div className=\"anchor-div\"><i className=\"fa fa-user\"></i> My Account</div> </li>\r\n\t\t\t\t\t\t\t\t<li> <div className=\"anchor-div\"><i className=\"fa fa-suitcase\"></i> Profile</div> </li> */}\r\n\t\t\t\t\t\t\t\t<li\r\n                                    onClick={ handleLogout }\r\n                                > \r\n                                    <div className=\"anchor-div\">\r\n                                        <i className=\"fa fa-sign-out\"></i> Logout\r\n                                    </div> \r\n                                </li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n            <div className=\"clearfix\"> </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { StickyLeft } from './StickyLeft'\r\nimport { StickyRight } from './StickyRight'\r\n\r\nexport const StickyHeader = ({toggleAside, settoggleAside}) => {\r\n    return (\r\n        <div className=\"sticky-header header-section \">\r\n\r\n            {/* STICKY-MENU LEFT */}\r\n            <StickyLeft\r\n                toggleAside={toggleAside}\r\n                settoggleAside={settoggleAside}\r\n            />\r\n\r\n            {/* STICKY-MENU RIGHT */}\r\n            <StickyRight/>\r\n\r\n            <div className=\"clearfix\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nStickyHeader.propTypes = {\r\n    toggleAside: PropTypes.bool.isRequired,\r\n    settoggleAside: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport ReactPlayer from 'react-player'\r\nimport { useSelector } from 'react-redux'\r\nimport './chanelScreen.css'\r\n\r\nexport const ChanelScreen = () => {\r\n\r\n    const { activeCH } = useSelector( state => state.channel );\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title1 text-center\">{ activeCH.title }</h2>\r\n            <div className=\"grids widget-shadow\">\r\n               \r\n                <div className='player-wrapper'>\r\n                    <ReactPlayer\r\n                        className='react-player'\r\n                        url= {activeCH.streamSrc}\r\n                        playing\r\n                        controls\r\n                        width='100%'\r\n                        height='80%'\r\n                    />\r\n\r\n                </div>\r\n                    <div className=\"widget-shadow\">\r\n        \r\n                        <div className=\"well\">\r\n                           <b className=\"text-primary title1\">Info:</b> { activeCH.description }\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { startDeleteChannel } from '../../redux/actions/chActions'\r\n\r\nexport const ChannelCard = ({channel}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleDelete = ()=>{\r\n        dispatch(startDeleteChannel(channel.id))\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"channel-card col-sm-12 col-md-6 col-xl-4\">\r\n\r\n            <div className=\"stats-info widget-shadow\">\r\n                <div className=\"stats-info-agileits m-2\">\r\n\r\n                    <header className=\"widget-header \">\r\n                        <h4 className=\"widget-title text-center pt-2\">{channel.title}</h4>\r\n                    </header>\r\n                    <hr className=\"widget-separator\"/>\r\n\r\n                    <div className=\"stats-body\">\r\n                        <ul className=\"info\">\r\n                            <li className=\"col-md-12\">\r\n                                <b>PONENTES</b>\r\n                                {\r\n                                    channel.speakers.map( speaker => (\r\n                                        <p \r\n                                            key={speaker.id}\r\n                                        >\r\n                                            {speaker.name}\r\n                                        </p>\r\n                                    ))\r\n                                }\r\n                               \r\n                            </li>\r\n                            <li className=\"col-md-12\">\r\n                                <b>Descripción</b>\r\n                                <p>{ channel.description }</p>\r\n                            </li>\r\n                            <li className=\"col-md-12\">\r\n                                <button\r\n                                    className=\"btn btn-outline-danger btn-sm\"\r\n                                    onClick ={ handleDelete }\r\n                                >\r\n                                Borrar</button>\r\n                            </li>\r\n                            <div className=\"clearfix\"></div>\r\n                        </ul>\r\n                    </div>\r\n                </div> \r\n            </div>\r\n        </div>\r\n              \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nChannelCard.propTypes = {\r\n    channel: PropTypes.object.isRequired\r\n}\r\n\r\n","import React from 'react'\r\nimport { Empty } from 'antd';\r\nimport { useSelector } from 'react-redux'\r\nimport { ChannelCard } from '../../ui/ChannelCard'\r\n\r\nexport const DashConfigChannelCards = () => {\r\n\r\n    const {channels} = useSelector( state => state.channel );\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"bs-example widget-shadow\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Salas registradas</h2> \r\n\r\n                            {   \r\n                                channels.length>0\r\n                                    ?\r\n                                        channels.map( channel =>(\r\n                                            <ChannelCard\r\n                                                key= { channel.id}\r\n                                                channel= { channel }\r\n                                            />\r\n                                        ))\r\n                                    :   <Empty \r\n                                        image={Empty.PRESENTED_IMAGE_SIMPLE} \r\n                                        className=\"col-md-12\"\r\n                                        />    \r\n                            }\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n                   \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    ","import React from 'react'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option } = Select;\r\n\r\n\r\n\r\nexport const MultiSelector = ({data, placeholder, reciveValue}) => {\r\n\r\n    const handleChange = (arrayOfKeys)=>{\r\n        const dataSelected = arrayOfKeys.map(key => (\r\n            data.find( element => element.id === key)\r\n            \r\n        ))\r\n\r\n        reciveValue(dataSelected);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Select \r\n                mode=\"tags\" \r\n                style={{ width: '100%' }} \r\n                placeholder={ placeholder }\r\n                onChange={handleChange}\r\n                >\r\n                {\r\n                    data.map( (el) => \r\n                        (<Option key={el.id} >{el.name}</Option>)\r\n                    )\r\n                }\r\n            </Select>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from \"react\";\r\n\r\n\r\nexport const useForm = (initialState = {name: '',email: '',password: ''}) => {\r\n\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () =>{\r\n        setValues(initialState)\r\n    }\r\n\r\n    const handleInputChange = ({target})=>{\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n\r\n    return [values, handleInputChange, reset]\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { MultiSelector } from '../../ui/MultiSelector';\r\nimport { useForm } from '../../../hooks/useForm'\r\nimport { startAddNewChannel } from '../../../redux/actions/chActions';\r\n\r\nexport const DashConfigChannels = () => {\r\n\r\n    const { speakers } = useSelector( state => state.speaker );\r\n    const dispatch = useDispatch()\r\n\r\n    const [formvalues, handleInputChange, reset] = useForm({\r\n        channelTitle: '',\r\n        channelSRC: '',\r\n        channelDescription : ''\r\n    })\r\n    const {channelTitle, channelSRC, channelDescription } = formvalues   \r\n    const [multiSelectValue, setselectValue] = useState([])\r\n\r\n    const [isValidForm, setIsValidForm] = useState(true)\r\n\r\n    const handleFormSubmit = e =>{\r\n        e.preventDefault();\r\n\r\n        //TODO VALIDAR\r\n        //Validar formvalues\r\n        if(channelTitle.trim()==='' || channelSRC.trim()==='' || channelDescription.trim()==='' || multiSelectValue.length ===0){\r\n            setIsValidForm( false )\r\n            return\r\n        }\r\n\r\n        //TODO REGISTRAR CHANNEL\r\n\r\n        const channelCreated = {\r\n            title: channelTitle,\r\n            streamSrc: channelSRC,\r\n            description: channelDescription,\r\n            speakers: multiSelectValue\r\n        }\r\n\r\n       dispatch(startAddNewChannel(channelCreated))\r\n\r\n       // Reset forms Values\r\n       reset()\r\n       setselectValue([])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n                <div className=\"card\">\r\n\r\n                    <div className=\"card-header\">\r\n\r\n                        <h2 className=\"text-secundary title1\">Registrar Salas:</h2>   \r\n\r\n                        <form\r\n                            onSubmit={ handleFormSubmit }\r\n                            className=\"row justify-content-end needs-validation\"\r\n                            noValidate\r\n                        >\r\n                            <div className=\"col-md-10\">\r\n\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!channelTitle) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Nombre de la Sala\"\r\n                                        name= \"channelTitle\"\r\n                                        value= { channelTitle }\r\n                                        onChange= { handleInputChange }                               \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo Título no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                            \r\n                            \r\n                            \r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!channelSRC) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Streaming Ej:[https://www.youtube.com/watch?v=YbKhyMbKSrQ]\"\r\n                                        name= \"channelSRC\"\r\n                                        value= { channelSRC } \r\n                                        onChange= { handleInputChange }                                   \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        La Fuente de Streaming no puede estar vacía\r\n                                    </div>\r\n                                </div>\r\n                            \r\n                            \r\n                                <div className=\"form-group\">\r\n\r\n                                    <MultiSelector\r\n                                        data ={ speakers }\r\n                                        placeholder = \"Ponentes\"\r\n                                        reciveValue = { setselectValue }\r\n                                    />\r\n                                    <div \r\n                                        className={`${ (isValidForm || multiSelectValue.length !==0) ? 'd-none' : 'd-block text-danger '}`}\r\n                                        style={{fontSize:'80%'}}\r\n                                    >\r\n                                        Debe introducir al menos un Ponente\r\n                                    </div>\r\n                                </div>\r\n                            \r\n                            \r\n                                <div className=\"form-group\">\r\n                                    <textarea\r\n                                        className={`${ (isValidForm || !!channelDescription) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Descripción de la Conferencia\"\r\n                                        name= \"channelDescription\"\r\n                                        value={ channelDescription } \r\n                                        onChange= { handleInputChange }    \r\n                                    >\r\n                                    </textarea>\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Descripción no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n\r\n                            <div className=\"col-md-2\">\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"submit\" \r\n                                        className=\"btn btn-outline-dark\" \r\n                                        value=\"+\" \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './uploadPics.css'\r\n\r\n//fatherComponent\r\n// const [formImage, setimageValue] = useState({\r\n//     isLoaded: false,\r\n//     imgFile:'',\r\n//     tempUrl: null\r\n// })\r\n\r\n\r\nexport const UploadPics = ({formImage, setimageValue}) => {\r\n\r\n    \r\n    const { isLoaded, imgFile } = formImage\r\n\r\n    const handleClick = ()=>{\r\n        document.querySelector('#avatarPicture').click()\r\n    }\r\n\r\n    const handleFileChange= e =>{\r\n        const file= e.target.files[0]   \r\n        const objectURL = URL.createObjectURL(file)\r\n\r\n        if(file){\r\n\r\n            setimageValue({\r\n                isLoaded: true,\r\n                imgFile: file,\r\n                tempUrl: objectURL\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                id=\"avatarPicture\"\r\n                type=\"file\"\r\n                name=\"file\"\r\n                style={{display:\"none\"}}\r\n                onChange={ handleFileChange }\r\n            />\r\n            <div \r\n                className=\"dropzone\"\r\n                onClick = { handleClick }\r\n            >\r\n                {\r\n                    isLoaded\r\n                    ? imgFile.name\r\n                    :<><i className=\"fa fa-cloud-upload\"></i> Cargar Imagen</>                 \r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/*************************************\r\n*         [USER]  ACTIONS            *\r\n**************************************/\r\n\r\nimport { fetchWithToken, fetchWithTokenFormData } from \"../../helpers/fetchJWT\";\r\nimport { types } from \"../types/types\";\r\nimport Swal from 'sweetalert2'\r\nconst baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n/*\r\n    MIDDLESWARE\r\n*/\r\nexport const startCheckingUserList = () =>{\r\n    return async(dispatch)=>{\r\n        \r\n        const resp = await fetchWithToken('users/userlist')\r\n        const body = await resp.json()\r\n        \r\n        if(body.ok){\r\n            // Format img property\r\n            const token = localStorage.getItem('token')\r\n            const usersToReducer = body.usuarios.map( user => ({\r\n                ...user,\r\n                img:`${baseUrl}/picture/usuarios/${!!user.img ? user.img : 'no-user-image' }?token=${token}`\r\n            }))\r\n\r\n            dispatch(userGetListAction(usersToReducer))\r\n        }else{\r\n            dispatch(userGetListAction([]))\r\n            console.log(body.msg);           \r\n        }\r\n    }\r\n}\r\n\r\nexport const startAddNewUser = (user) =>{\r\n    return async(dispatch)=>{\r\n\r\n        const resp = await fetchWithTokenFormData('users/register', user, 'POST')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n            const token = localStorage.getItem('token')\r\n\r\n            const userToReducer ={\r\n                ...body.usuario,\r\n                img:`${baseUrl}/picture/usuarios/${!!body.usuario.img ? body.usuario.img : 'no-user-image' }?token=${token}`    \r\n            }\r\n\r\n            //Dispatch userSetActive\r\n            dispatch(userSetActiveAction( userToReducer ))\r\n\r\n            //Dispatch userAddNew\r\n            dispatch(userAddNewAction( userToReducer ))\r\n            \r\n            Swal.fire('Ok', 'Registrado Correctamente','success')\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n    }\r\n}\r\n\r\nexport const startDeleteUser = (uid) =>{\r\n    return async(dispatch)=>{\r\n        const endpoint = `users/${uid}`\r\n        const resp = await fetchWithToken( endpoint, {}, 'DELETE')\r\n        const body = await resp.json()\r\n\r\n       \r\n        if(body.ok){\r\n\r\n            //Dispatch userAddNew\r\n            dispatch(userDeleteAction( uid ))\r\n            Swal.fire('Ok', body.msg,'success')\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\n    ACTIONS\r\n*/\r\nconst userGetListAction = ( users )=>{\r\n    return{\r\n        type: types.userListCheckingFinish,\r\n        payload: users\r\n    }\r\n}\r\nconst userSetActiveAction = ( user )=>{\r\n    return{\r\n        type: types.userSetActive,\r\n        payload: user\r\n    }\r\n}\r\nexport const userUnSetActiveAction = ( )=>{\r\n    return{\r\n        type: types.userUnSetActive\r\n    }\r\n}\r\n\r\nconst userAddNewAction = ( user )=>{\r\n    return{\r\n        type: types.userRegister,\r\n        payload: user\r\n    }\r\n}\r\nconst userDeleteAction = ( uid )=>{\r\n    return{\r\n        type: types.userDelete,\r\n        payload: uid\r\n    }\r\n}","/*************************************\r\n*         [SPEAKER]  ACTIONS         *\r\n**************************************/\r\n\r\nimport { fetchWithToken } from \"../../helpers/fetchJWT\";\r\nimport { types } from \"../types/types\";\r\nimport Swal from 'sweetalert2'\r\nimport { startAddNewUser, startDeleteUser, userUnSetActiveAction } from \"./userActions\";\r\n\r\n\r\n/*\r\n    MIDDLESWARE\r\n*/\r\nexport const startCheckingSpeakersList = () =>{\r\n    return async(dispatch)=>{\r\n        \r\n        const resp = await fetchWithToken('speaker')\r\n        const body = await resp.json()\r\n\r\n        \r\n        if(body.ok){\r\n            const speakers = body.speakers.map( speaker => ({\r\n                ...speaker,\r\n                usuario:{\r\n                    uid: speaker.usuario._id,\r\n                    name: speaker.usuario.name,\r\n                    userName: speaker.usuario.name,\r\n                    email: speaker.usuario.email,\r\n                    role: speaker.usuario.role,\r\n                    img: speaker.usuario.img || ''\r\n                }\r\n            }))\r\n\r\n            dispatch(spGetListAction(speakers))\r\n        }else{\r\n            dispatch(spGetListAction([]))\r\n            console.log(body.msg)\r\n        }\r\n    }\r\n}\r\n\r\nexport const startAddNewSpeaker = (speaker) =>{\r\n    return async(dispatch, getState)=>{\r\n\r\n        \r\n        //Dispatch userAddNewUser\r\n        await dispatch(startAddNewUser( speaker.usuario ))\r\n        const {activeUser} = getState().user\r\n\r\n        if(activeUser){\r\n            const speakerToDB = {\r\n                ...speaker,\r\n                usuario:{\r\n                    ...activeUser\r\n                }\r\n            }\r\n    \r\n            //Create Speaker\r\n            const resp = await fetchWithToken('speaker/create', speakerToDB, 'POST')\r\n            const body = await resp.json()\r\n    \r\n            if(body.ok){\r\n    \r\n                //Dispatch userAddNewSpeaker\r\n                dispatch(spAddNewAction( {\r\n                    ...body.speaker,\r\n                    usuario:{\r\n                        ...activeUser   \r\n                    }\r\n                } ))\r\n    \r\n            }else{\r\n                Swal.fire('Error', body.msg,'error')\r\n            }\r\n        }\r\n\r\n        dispatch(userUnSetActiveAction())\r\n        \r\n    }\r\n}\r\n\r\nexport const startDeleteSpeaker = (id, uid) =>{\r\n    return async(dispatch)=>{\r\n        const speakerEndpoint = `speaker/${id}`\r\n        const resp = await fetchWithToken( speakerEndpoint, {}, 'DELETE')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n\r\n            dispatch(spDeleteAction( id ))\r\n            //Dispatch userAddNew\r\n           \r\n            dispatch(startDeleteUser( uid ))\r\n            \r\n\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    ACTIONS\r\n*/\r\n\r\nconst spGetListAction = ( speakers )=>{\r\n    return{\r\n        type: types.spListCheckingFinish,\r\n        payload: speakers\r\n    }\r\n}\r\nexport const spSetActiveAction = ( speaker )=>{\r\n    return{\r\n        type: types.spSetActive,\r\n        payload: speaker\r\n    }\r\n}\r\n\r\nconst spAddNewAction = ( speaker )=>{\r\n    return{\r\n        type: types.spRegister,\r\n        payload: speaker\r\n    }\r\n}\r\nconst spDeleteAction = ( id )=>{\r\n    return{\r\n        type: types.spDelete,\r\n        payload: id\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport validator from 'validator'\r\nimport PhoneInput from 'react-phone-number-input'\r\nimport 'react-phone-number-input/style.css'\r\nimport './dashConfigPonentes.css'\r\n\r\n\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from '../../../hooks/useForm'\r\nimport { UploadPics } from '../../ui/UploadPics'\r\nimport { startAddNewSpeaker } from '../../../redux/actions/speakerActions'\r\n\r\nconst formInitialState= {\r\n    formName: '',\r\n    formUser: '',\r\n    formEmail: '',\r\n    formTitle: '',\r\n    formPassword: '',\r\n    formPassword2: '',\r\n    formTopic: '',\r\n    formCountry: ''\r\n}\r\nconst imgInitialState= {\r\n    isLoaded: false,\r\n    imgFile:'',\r\n    tempUrl: null\r\n}\r\n\r\nexport const DashConfigPonentes = () => {\r\n\r\n    const [formvalues, handleInputChange, reset] = useForm(formInitialState)\r\n    const {formName,formUser,formEmail, formTitle,formPassword, formTopic, formCountry, formPassword2} = formvalues\r\n    const [formWhatsapp, setformWhatsapp] = useState('+53')\r\n    const [formImage, setimageValue] = useState(imgInitialState)\r\n    const {imgFile, tempUrl} = formImage\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [isValidForm, setIsValidForm] = useState(true)\r\n\r\n    const handleFormSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        //Validar formvalues\r\n        if(formName.trim()==='' || formUser.trim()==='' || !validator.isEmail(formEmail.trim()) || formTitle.trim()==='' || formPassword.trim()!==formPassword2.trim()  || formTopic.trim()==='' || formCountry.trim()==='' || formWhatsapp === undefined || formWhatsapp.length <= 9){\r\n            setIsValidForm( false )\r\n            return\r\n        }\r\n\r\n             \r\n        //console.log(imgFile);\r\n        dispatch(startAddNewSpeaker({\r\n            name: formName,\r\n            title: formTitle,\r\n            country: formCountry,\r\n            topic: formTopic,\r\n            whatsApp: formWhatsapp,\r\n            usuario:{\r\n                name: formName,\r\n                userName: formUser,\r\n                password: formPassword,\r\n                email: formEmail,\r\n                archive: imgFile,\r\n                role: \"USER_ROLE\"  \r\n            }\r\n        }))\r\n\r\n        // Reset Forms values\r\n        reset()\r\n        setimageValue(imgInitialState)\r\n\r\n\r\n      \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Registrar Ponentes:</h2>\r\n\r\n                        <form\r\n                            onSubmit={ handleFormSubmit }\r\n                            className=\"row justify-content-end needs-validation\"\r\n                            noValidate\r\n                        >\r\n                            <div className=\"col-md-5 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!formName) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Nombre\"\r\n                                        name= \"formName\"\r\n                                        value= {formName}\r\n                                        onChange= { handleInputChange }                               \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Nombre no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!formUser) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Usuario [Ej: poner parte delantera del email]\"\r\n                                        name= \"formUser\"\r\n                                        value={formUser} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Usuario no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${(isValidForm || validator.isEmail(formEmail)) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Correo\"\r\n                                        name= \"formEmail\"\r\n                                        value={formEmail} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de email debe ser válido\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${(isValidForm || (!!formPassword && formPassword.length > 5) ) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Contraseña\"\r\n                                        name= \"formPassword\"\r\n                                        value={formPassword} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Contraseña debe ser mayor de 6 caracteres\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${(isValidForm || (!!formPassword2 && formPassword2.length > 5 && formPassword2 === formPassword) ) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Confirmación de contraseña\"\r\n                                        name= \"formPassword2\"\r\n                                        value={formPassword2} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        Las contraseñas no coinciden\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className=\"col-md-5 col-sm-12\">\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!formTitle) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Título Ej: Master en Ciencias\"\r\n                                        name= \"formTitle\"\r\n                                        value={formTitle} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Título no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!formTopic) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Tema de la Conferencia\"\r\n                                        name= \"formTopic\"\r\n                                        value={formTopic} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Tema no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!formCountry) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"País\"\r\n                                        name= \"formCountry\"\r\n                                        value={formCountry} \r\n                                        onChange= { handleInputChange }                                 \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de País no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <PhoneInput\r\n                                        international\r\n                                        className={`${(isValidForm || (!!formWhatsapp && formWhatsapp.length >= 9) ) ? '' : 'is-invalid'}`}\r\n                                        defaultCountry=\"CU\"\r\n                                        value={formWhatsapp}\r\n                                        onChange={ setformWhatsapp }\r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        Debe introducir un contácto válido\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                \r\n                                <UploadPics\r\n                                    formImage={ formImage }\r\n                                    setimageValue= { setimageValue }\r\n                                />\r\n                                \r\n                            </div>\r\n\r\n\r\n                            <div className=\"col-md-2 col-sm-12\">\r\n                               \r\n\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"submit\" \r\n                                        className=\"btn btn-outline-dark\" \r\n                                        value=\"+\" \r\n                                    />\r\n                                </div>\r\n                                \r\n                                {\r\n                                    !!tempUrl \r\n                                        &&(\r\n                                            <img\r\n                                                alt='avatar'\r\n                                                src={ tempUrl }\r\n                                                style={{\r\n                                                    maxWidth: 80,\r\n                                                    maxHeight: 80,\r\n\r\n                                                }}\r\n                                            />\r\n                                        )\r\n                                }\r\n                                \r\n\r\n                            </div>\r\n                        </form>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {useSelector, useDispatch } from 'react-redux'\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport { startDeleteSpeaker } from '../../../redux/actions/speakerActions';\r\n\r\nconst { Column } = Table;\r\n\r\nexport const DashConfigPonentesTable = () => {\r\n    const dispatch = useDispatch()\r\n    const { speakers } = useSelector( state => state.speaker );\r\n    \r\n\r\n    const handleDeleteUser = (e,{key}) =>{\r\n        const speakerId = key\r\n        const speakerUid = speakers.find( speaker => speaker.id === key).usuario.uid\r\n        dispatch(startDeleteSpeaker(speakerId, speakerUid ))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Ponentes Registrados</h2>\r\n\r\n                        <Table \r\n                            dataSource={\r\n                                speakers.map( speaker =>(\r\n                                        {\r\n                                            key: speaker.id,\r\n                                            name: speaker.name,\r\n                                            title: speaker.title,\r\n                                            topic: speaker.topic ,\r\n                                            country: speaker.country,\r\n                                            whatsApp: speaker.whatsApp\r\n                                             \r\n                                        })\r\n                                )\r\n                            }\r\n                            scroll={{ x: 650 }}\r\n                        >\r\n                            <Column title=\"Nombre\" dataIndex=\"name\" key=\"name\" width=\"50\" fixed=\"left\"/>\r\n                            <Column title=\"Título\" dataIndex=\"title\" key=\"title\" />\r\n                            <Column title=\"Tema\" dataIndex=\"topic\" key=\"topic\" />\r\n                            <Column title=\"País\" dataIndex=\"country\" key=\"country\" />\r\n                            <Column title=\"WhatsApp\" dataIndex=\"whatsApp\" key=\"whatsApp\" />\r\n                            <Column\r\n                                title=\"Acción\"\r\n                                key=\"action\"\r\n                                render={ (text, record) => \r\n                                    <button\r\n                                        className=\"btn btn-outline-danger btn-sm\"\r\n                                        onClick={ (e)=>handleDeleteUser(e,record) }\r\n                                    >Delete</button>\r\n                                }\r\n                            />\r\n                        </Table>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { DashConfigChannelCards } from './DashConfigChannelCards'\r\nimport { DashConfigChannels } from './DashConfigChannels'\r\nimport { DashConfigPonentes } from './DashConfigPonentes'\r\nimport { DashConfigPonentesTable } from './DashConfigPonentesTable'\r\n\r\nexport const DashConfigScreen = () => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title1 text-center\">Configuraciones Generales</h2>\r\n\r\n            {/* Speakers Registration */}\r\n            <DashConfigPonentes/>\r\n\r\n            {/* Speakers Registration Table */}\r\n            <DashConfigPonentesTable/>\r\n\r\n\r\n            {/* Channel Registration */}\r\n            <DashConfigChannels/>\r\n\r\n            {/* Channels Cards */}\r\n            <DashConfigChannelCards/>\r\n\r\n        </>\r\n    )\r\n}\r\n","/*************************************\r\n*         [POSTER]  ACTIONS            *\r\n**************************************/\r\nimport { fetchWithToken, fetchWithTokenFormData } from \"../../helpers/fetchJWT\";\r\nimport { types } from \"../types/types\";\r\nimport Swal from 'sweetalert2'\r\nconst baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n/*\r\n    MIDDLESWARE\r\n*/\r\nexport const startCheckingPostersList = () =>{\r\n    return async(dispatch)=>{\r\n        \r\n        const resp = await fetchWithToken('poster/list')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n            const token = localStorage.getItem('token')\r\n            const postersToReducer = body.posters.map( poster => ({\r\n                ...poster,\r\n                img:`${baseUrl}/picture/galeria/${!!poster.img ? poster.img : 'no-image' }?token=${token}`\r\n            }))\r\n            \r\n\r\n            dispatch(posterGetListAction(postersToReducer))\r\n        }else{\r\n            dispatch(posterGetListAction([]))\r\n            console.log(body.msg);           \r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const startAddNewPoster = ( poster ) =>{\r\n    return async(dispatch)=>{\r\n        \r\n        const resp = await fetchWithTokenFormData('poster/create/galeria', poster , 'POST')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n            const token = localStorage.getItem('token')\r\n\r\n            const posterToReducer ={\r\n                ...body.poster,\r\n                img:`${baseUrl}/picture/galeria/${!!body.poster.img ? body.poster.img : 'no-image' }?token=${token}`    \r\n            }\r\n\r\n            dispatch(posterAddNewAction(posterToReducer))\r\n            Swal.fire('OK', 'Poster creado correctamente','success')\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const startDeletePoster = (id) =>{\r\n    return async(dispatch)=>{\r\n        const posterEndpoint = `poster/${id}`\r\n        const resp = await fetchWithToken( posterEndpoint, {}, 'DELETE')\r\n        const body = await resp.json()\r\n\r\n        if(body.ok){\r\n\r\n            dispatch(posterDeleteAction( id ))\r\n            //Dispatch userAddNew\r\n            Swal.fire('OK', body.msg,'success')\r\n        }else{\r\n            Swal.fire('Error', body.msg,'error')\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n    ACTIONS\r\n*/\r\nconst posterGetListAction = ( posters )=>{\r\n    return{\r\n        type: types.posterListCheckingFinish,\r\n        payload: posters\r\n    }\r\n}\r\nexport const posterSetActiveAction = ( posterID )=>{\r\n    return{\r\n        type: types.posterSetActive,\r\n        payload: posterID\r\n    }\r\n}\r\nexport const posterUnSetActiveAction = ( )=>{\r\n    return{\r\n        type: types.posterUnSetActive,\r\n    }\r\n}\r\nconst posterAddNewAction = ( poster )=>{\r\n    return{\r\n        type: types.posterAddNew,\r\n        payload: poster\r\n    }\r\n}\r\nconst posterDeleteAction = ( posterID )=>{\r\n    return{\r\n        type: types.posterRemove,\r\n        payload: posterID\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport { Empty } from 'antd';\r\nimport { Card, Button } from 'antd';\r\n\r\n\r\nconst { Meta } = Card;\r\n\r\nexport const GalleryCard = ( { isLoaded, urlImg , cardTitleName=\"Título\" ,cardTitle, formAlt, cardInfoName=\"Descripción\",cardInfo, action=false, actionName, onBntClick, cardClick } ) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n\r\n                hoverable\r\n                cover={\r\n                    isLoaded\r\n                        ?<img alt={formAlt} src={urlImg} />\r\n                        :<Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                }\r\n                onClick={ cardClick }\r\n            >\r\n                <Meta \r\n                    title={`${cardTitleName}: ${cardTitle}`} \r\n                    description={`${cardInfoName}: ${cardInfo}`}                     \r\n                />\r\n                \r\n                {\r\n                    action\r\n                        && \r\n                        <Button \r\n                            className=\"mt-3 float-right\"\r\n                            type=\"link\" \r\n                            danger\r\n                            onClick={ onBntClick }\r\n                        >\r\n                            {actionName}\r\n                        </Button>\r\n                        \r\n                }\r\n            </Card>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Empty } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startDeletePoster } from '../../../redux/actions/posterActions'\r\nimport { GalleryCard } from '../../ui/GalleryCard'\r\n\r\n\r\nexport const DashGalleryCards = () => {\r\n\r\n    const { posters } = useSelector(state => state.poster)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleDeletePoster =( posterId )=>{\r\n\r\n        dispatch(startDeletePoster(posterId));\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">            \r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Administar Poster:</h2> \r\n\r\n                        <div className=\"row\">\r\n                            {   posters.length>0\r\n                                    ?   (posters.map( poster =>(\r\n                                            <div \r\n                                                className=\"channel-card col-sm-12 col-md-6 my-2\"\r\n                                                key={poster.id}                                       \r\n                                            >                                   \r\n                                                <GalleryCard\r\n                                                    isLoaded={true}\r\n                                                    urlImg={poster.img}\r\n                                                    cardTitle={poster.title}\r\n                                                    formAlt={poster.alt}\r\n                                                    cardInfo={poster.info}\r\n                                                    action={true}\r\n                                                    actionName='Eliminar'\r\n                                                    onBntClick={ ()=>handleDeletePoster(poster.id) }\r\n                                                />\r\n                                            </div>\r\n                                            \r\n                                        )))\r\n                                        \r\n                                    :   <Empty \r\n                                            image={Empty.PRESENTED_IMAGE_SIMPLE} \r\n                                            className=\"col-md-12\"\r\n                                        />\r\n\r\n                            }\r\n                        </div>\r\n\r\n\r\n                    </div>    \r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n                            \r\n","import React, { useState } from 'react'\r\nimport { UploadPics } from '../../ui/UploadPics'\r\nimport { GalleryCard } from '../../ui/GalleryCard';\r\nimport { useForm } from '../../../hooks/useForm';\r\nimport Swal from 'sweetalert2';\r\nimport { useDispatch } from 'react-redux';\r\nimport { startAddNewPoster } from '../../../redux/actions/posterActions';\r\n\r\nconst fornImageInitialState = {\r\n    isLoaded: false,\r\n    imgFile:'',\r\n    tempUrl: null\r\n}\r\n\r\nexport const DashGalleryForm = () => {\r\n\r\n    const [formImage, setimageValue] = useState(fornImageInitialState)\r\n    const {imgFile,isLoaded, tempUrl} = formImage\r\n\r\n    const [formvalues, handleInputChange, reset] = useForm({\r\n        formTitle: '',\r\n        formAlt: '',\r\n        formInfo: '',\r\n    })\r\n    const {formTitle, formAlt, formInfo} = formvalues\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleFormSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        //TODO: VALIDAR\r\n        if(formTitle.trim()===\"\" || formAlt.trim()===\"\" || formAlt.trim()===\"\" || !isLoaded){\r\n            Swal.fire('Error','Debe llenar todos los campos y la imagen es obligatoria', 'error')\r\n            return\r\n        }\r\n\r\n        //Registrar Poster\r\n        const newPoster={\r\n            archive: imgFile,\r\n            title: formTitle,\r\n            alt: formAlt,\r\n            info: formInfo\r\n\r\n        }\r\n\r\n        dispatch(startAddNewPoster(newPoster))\r\n        // Reset forms\r\n        reset()\r\n        setimageValue(fornImageInitialState)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Crear Poster:</h2>   \r\n                        <form\r\n                            onSubmit={ handleFormSubmit }\r\n                            className=\"row needs-validation\"\r\n                            noValidate\r\n                        >   \r\n                            <div className=\"col-md-7 col-sm-12 justify-content-center pb-3\">\r\n                                <GalleryCard\r\n                                    isLoaded={isLoaded}\r\n                                    urlImg={tempUrl}\r\n                                    cardTitle={formTitle}\r\n                                    formAlt={formAlt}\r\n                                    cardInfo={formInfo}                                    \r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-5 col-sm-12\">\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className='form-control'\r\n                                        placeholder=\"Título\"\r\n                                        name= \"formTitle\"\r\n                                        value= { formTitle }\r\n                                        onChange= { handleInputChange }                               \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Nombre no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className='form-control'\r\n                                        placeholder=\"Texto Alternativo\"\r\n                                        name= \"formAlt\"\r\n                                        value= {formAlt}\r\n                                        onChange= { handleInputChange }                               \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Nombre no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className='form-control'\r\n                                        placeholder=\"Descripción\"\r\n                                        name= \"formInfo\"\r\n                                        value= {formInfo}\r\n                                        onChange= { handleInputChange }                               \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Nombre no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <UploadPics\r\n                                    formImage={formImage}\r\n                                    setimageValue={setimageValue}\r\n                                />\r\n                                <div className=\"form-group mt-4\">\r\n                                    <input \r\n                                        type=\"submit\" \r\n                                        className=\"btn btn-outline-dark btn-block\" \r\n                                        value=\"Crear Poster\" \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { DashGalleryCards } from './DashGalleryCards'\r\nimport { DashGalleryForm } from './DashGalleryForm'\r\n\r\nexport const DashGalleryScreen = () => {\r\n    return (\r\n        <>\r\n            <h2 className=\"title1 text-center\">Configuraciones de Galería</h2>\r\n\r\n            {/* Gallery Form */}\r\n            <DashGalleryForm/>\r\n\r\n            {/* Gallery Cards*/}\r\n            <DashGalleryCards/>\r\n            \r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from '../../../hooks/useForm'\r\nimport validator from 'validator'\r\nimport { startAddNewUser } from '../../../redux/actions/userActions'\r\nimport { GalleryCard } from '../../ui/GalleryCard'\r\nimport { UploadPics } from '../../ui/UploadPics'\r\n\r\nconst userFormInitialState = {\r\n    registerUser: '',\r\n    registerName: '',\r\n    registerEmail: '',\r\n    registerPassword: '',\r\n    registerConfirmation: '',\r\n    registerRole: 'USER_ROLE'\r\n\r\n}\r\n\r\nconst fornImageInitialState = {\r\n    isLoaded: false,\r\n    imgFile:'',\r\n    tempUrl: null\r\n}\r\n\r\n\r\nexport const DashRegister = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    const [formvalues, handleInputChange, reset] = useForm(userFormInitialState)\r\n    const {registerUser, registerName, registerEmail, registerPassword, registerConfirmation, registerRole} = formvalues\r\n    \r\n    const [formImage, setimageValue] = useState(fornImageInitialState)\r\n    const {imgFile,isLoaded, tempUrl} = formImage\r\n    \r\n    const [isValidForm, setIsValidForm] = useState(true)\r\n\r\n    const handleFormSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        //Validar formvalues\r\n        if(registerUser.trim()==='' || registerName.trim()==='' || registerEmail.trim()==='' || registerPassword.trim()==='' || registerConfirmation.trim()==='' || registerRole.trim()==='' || !validator.isEmail(registerEmail.trim()) || registerPassword.trim()!== registerConfirmation.trim()){\r\n            setIsValidForm( false )\r\n            return\r\n        }\r\n\r\n\r\n        // Registrar Ponente\r\n        setIsValidForm( true )\r\n        dispatch(startAddNewUser({\r\n            name: registerName,\r\n            userName: registerUser,\r\n            email: registerEmail,\r\n            password: registerPassword,\r\n            role: registerRole,\r\n            archive: imgFile\r\n        }))\r\n\r\n        //Reset form\r\n        reset()\r\n        setimageValue(fornImageInitialState)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Registro de Usuarios</h2>\r\n\r\n                        <form\r\n                            onSubmit={ handleFormSubmit }\r\n                            className=\"needs-validation row\" \r\n                            noValidate\r\n                        >\r\n                            <div className=\"col-md-7\">\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${ (isValidForm || !!registerUser) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Usuario\"\r\n                                        name= \"registerUser\" \r\n                                        value= { registerUser }    \r\n                                        onChange={ handleInputChange }  \r\n                                        \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Usuario no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${(isValidForm || !!registerName) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Nombre Completo\"\r\n                                        name= \"registerName\"  \r\n                                        value= { registerName }    \r\n                                        onChange={ handleInputChange } \r\n                                                                    \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        El campo de Nombre no puede estar vacío\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        className={`${(isValidForm || validator.isEmail(registerEmail)) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Correo\"\r\n                                        name= \"registerEmail\"\r\n                                        value= { registerEmail }    \r\n                                        onChange={ handleInputChange }\r\n                                        \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        Debe introducir un email válido\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        className={`${(isValidForm || (!!registerPassword && registerPassword.length > 5) ) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Contraseña\"\r\n                                        name= \"registerPassword\"\r\n                                        value= { registerPassword }    \r\n                                        onChange={ handleInputChange }\r\n                                        \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        La contraseña debe tener 6-20 caracteres\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        className={`${(isValidForm || (!!registerConfirmation && registerConfirmation.length > 5 && registerConfirmation === registerPassword) ) ? 'form-control' : 'form-control is-invalid'}`}\r\n                                        placeholder=\"Repita la contraseña\"\r\n                                        name= \"registerConfirmation\"\r\n                                        value= { registerConfirmation }    \r\n                                        onChange={ handleInputChange }\r\n                                        \r\n                                    />\r\n                                    <div className=\"invalid-feedback\">\r\n                                        No coinciden las contraseñas\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <select\r\n                                        className={`${ (isValidForm || !!registerRole) ? 'form-control custom-select' : 'form-control custom-select is-invalid'}`}\r\n                                        name= \"registerRole\"\r\n                                        value= { registerRole }    \r\n                                        onChange={ handleInputChange }\r\n                                        \r\n                                    >\r\n                                        <option disabled value=\"\">-- Seleccione Role --</option>\r\n                                        <option value=\"USER_ROLE\">Invitado</option>\r\n                                        <option value=\"ADMIN_ROLE\">Administrador</option>\r\n                                    </select>\r\n                                    <div className=\"invalid-feedback\">\r\n                                        Debe introducir un role válido\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-5\">\r\n                                <div className=\"form-group\">\r\n                                    <GalleryCard\r\n                                        isLoaded={isLoaded}\r\n                                        urlImg={tempUrl}\r\n                                        cardTitleName=\"Nombre\"\r\n                                        cardTitle={registerName}\r\n                                        formAlt={registerName}\r\n                                        cardInfoName=\"Correo\"\r\n                                        cardInfo={registerEmail}                                    \r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <UploadPics                              \r\n                                        formImage={formImage}\r\n                                        setimageValue={setimageValue}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"submit\" \r\n                                        className=\"btn btn-outline-dark float-right\" \r\n                                        value=\"Crear cuenta\" \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            \r\n                        </form>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {useSelector, useDispatch } from 'react-redux'\r\nimport 'antd/dist/antd.css';\r\nimport { Table } from 'antd';\r\nimport { startDeleteUser } from '../../../redux/actions/userActions';\r\n\r\nconst { Column } = Table;\r\n\r\n\r\nexport const DashRegTable = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { users } = useSelector( state => state.user );\r\n    \r\n\r\n    const handleDeleteUser = (e,{key}) =>{\r\n        dispatch(startDeleteUser(key))\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Usuarios Registrados</h2>\r\n\r\n                        <Table \r\n                            dataSource={\r\n                                users.map( user =>(\r\n                                        {\r\n                                            key: user.uid,\r\n                                            name: user.name,\r\n                                            email: user.email,\r\n                                            role: user.role \r\n                                        })\r\n                                )\r\n                            }\r\n                            scroll={{ x: 650 }}\r\n                        >\r\n                            <Column title=\"Nombre\" dataIndex=\"name\" key=\"name\" width=\"50\" fixed=\"left\"/>\r\n                            <Column title=\"Email\" dataIndex=\"email\" key=\"email\" />\r\n                            <Column title=\"Role\" dataIndex=\"role\" key=\"role\" />\r\n                            <Column\r\n                                title=\"Acción\"\r\n                                key=\"action\"\r\n                                render={ (text, record) => \r\n                                    <button\r\n                                        className=\"btn btn-outline-danger btn-sm\"\r\n                                        onClick={ (e)=>handleDeleteUser(e,record) }\r\n                                    >Delete</button>\r\n                                }\r\n                            />\r\n                        </Table>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './loading.css'\r\n\r\nexport const Loading = () => {\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow m-auto\">\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header m-auto bg-transparent\">\r\n                            <div className=\"sk-chase\">\r\n                                <div className=\"sk-chase-dot\"></div>\r\n                                <div className=\"sk-chase-dot\"></div>\r\n                                <div className=\"sk-chase-dot\"></div>\r\n                                <div className=\"sk-chase-dot\"></div>\r\n                                <div className=\"sk-chase-dot\"></div>\r\n                                <div className=\"sk-chase-dot\"></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { DashRegister } from './DashRegister'\r\nimport { DashRegTable } from './DashRegTable'\r\nimport {useSelector, useDispatch } from 'react-redux'\r\nimport { Loading } from '../../ui/Loading'\r\nimport { startCheckingUserList } from '../../../redux/actions/userActions'\r\n\r\n\r\nexport const DashRegScreen = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const { checking} = useSelector( state => state.user );\r\n\r\n    useEffect(() => {\r\n        dispatch(startCheckingUserList())\r\n    }, [dispatch])\r\n\r\n    if(checking){\r\n        return(\r\n            <>\r\n            <h2 className=\"title1 text-center\">Configuraciones de Registro</h2>    \r\n            <Loading/>\r\n        </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"title1 text-center\">Configuraciones de Registro</h2>\r\n\r\n            {/* Register Form */}\r\n            <DashRegister/>\r\n            \r\n            {/* Users Table */}\r\n            <DashRegTable/>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport 'antd/dist/antd.css';\r\nimport { Collapse, Empty } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { Panel } = Collapse;\r\n\r\n\r\nexport const InfoDescripcion = () => {\r\n\r\n    const { channels } = useSelector(state => state.channel)\r\n\r\n    const descriptions= channels.map( channel =>(\r\n        {\r\n            id: channel.id,\r\n            title: channel.title,\r\n            descripcion: channel.description\r\n        }\r\n    ))\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bs-example widget-shadow\">\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h2 className=\"text-secundary title1\">Descripción:</h2>\r\n                    \r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        {\r\n                            descriptions.length>0\r\n                                ?   \r\n                                (   <Collapse accordion>\r\n                                    {\r\n                                        descriptions.map( (desc , i) => (\r\n\r\n                                        <Panel header={ desc.title } key={i+1}>\r\n                                        <p>{desc.descripcion}</p>\r\n                                        </Panel>\r\n                                        ))\r\n                                    }\r\n                                    </Collapse>\r\n                                )\r\n                                :   <Empty \r\n                                        image={Empty.PRESENTED_IMAGE_SIMPLE} \r\n                                        className=\"col-md-12\"\r\n                                    />\r\n                        }\r\n                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport 'antd/dist/antd.css'\r\nimport { Table } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\nconst columns = [\r\n    {\r\n      title: 'Nombre',\r\n      dataIndex: 'nombre',\r\n      key: 'nombre',\r\n      fixed: 'left',\r\n      width: 120,\r\n    },\r\n    {\r\n      title: 'Título',\r\n      dataIndex: 'titulo',\r\n      key: 'titulo',\r\n    },\r\n    {\r\n      title: 'País',\r\n      dataIndex: 'pais',\r\n      key: 'pais'\r\n    },\r\n    {\r\n      title: 'Tema',\r\n      dataIndex: 'tema',\r\n      key: 'tema'\r\n    }\r\n]\r\n\r\nexport const InfoPonentes = () => {\r\n\r\n  const {speakers} = useSelector( state => state.speaker );\r\n\r\n  const data= speakers.map( speaker =>(\r\n    {\r\n      key: speaker.id,\r\n      nombre: speaker.name,\r\n      titulo: speaker.title,\r\n      pais: speaker.country,\r\n      tema: speaker.topic\r\n    }\r\n  ))\r\n\r\n  return (\r\n      <>\r\n          <div className=\"bs-example widget-shadow\">\r\n              <div className=\"card\">\r\n                  <div className=\"card-header\">\r\n                      <h2 className=\"text-secundary title1\">Ponentes:</h2>\r\n                  \r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                      <Table \r\n                        columns={columns} \r\n                        dataSource={data} \r\n                        pagination={ {pageSize: 4} }\r\n                        scroll={{ x: 650 }}\r\n                        \r\n                      />\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { InfoDescripcion } from './InfoDescripcion'\r\nimport { InfoPonentes } from './InfoPonentes'\r\n\r\nexport const InfoScreen = () => {\r\n    return (\r\n        <>\r\n            <h2 className=\"title1 text-center\">Información General del Evento</h2>\r\n                \r\n            <InfoPonentes/>\r\n\r\n            <InfoDescripcion/>\r\n   \r\n            \r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { GalleryCard } from '../../ui/GalleryCard'\r\nimport { Empty, Modal } from 'antd';\r\nimport { posterSetActiveAction, posterUnSetActiveAction } from '../../../redux/actions/posterActions';\r\n\r\n\r\nexport const PosterGalleryScreen = () => {\r\n\r\n    const { posters, activePoster } = useSelector(state => state.poster)\r\n    const dispatch = useDispatch();\r\n\r\n    const [modalVisible, setmodalVisible] = useState(false)\r\n\r\n    const getPoster = (posterID)=>{\r\n        dispatch(posterSetActiveAction(posterID));\r\n        setmodalVisible(true)\r\n    }\r\n\r\n    const handleOkModal=()=>{\r\n        setmodalVisible(false)\r\n        dispatch(posterUnSetActiveAction());\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <h2 className=\"title1 text-center\">Posters del Evento</h2>\r\n\r\n            <div className=\"bs-example widget-shadow\">            \r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        \r\n\r\n                        <div className=\"row\">\r\n                            {   posters.length>0\r\n                                    ?   (posters.map( poster =>(\r\n                                            <div \r\n                                                className=\"channel-card col-sm-12 col-md-6 my-2\"\r\n                                                key={poster.id}                                       \r\n                                            >                                   \r\n                                                <GalleryCard\r\n                                                    isLoaded={true}\r\n                                                    urlImg={poster.img}\r\n                                                    cardTitle={poster.title}\r\n                                                    formAlt={poster.alt}\r\n                                                    cardInfo={poster.info}\r\n                                                    cardClick={()=>getPoster(poster.id)}\r\n                                                />\r\n                                            </div>\r\n                                            \r\n                                        )))\r\n                                        \r\n                                    :   <Empty \r\n                                            image={Empty.PRESENTED_IMAGE_SIMPLE} \r\n                                            className=\"col-md-12\"\r\n                                        />\r\n\r\n                            }\r\n                        </div>\r\n\r\n\r\n                        <Modal\r\n                            title=\"Poster del Evento\"       \r\n                            width={600}\r\n                            centered\r\n                            visible={modalVisible}\r\n                            onOk={handleOkModal}\r\n                            onCancel={handleOkModal}\r\n                        >\r\n                            {\r\n                                !!activePoster\r\n                                    &&\r\n                                    <GalleryCard\r\n                                        isLoaded={true}\r\n                                        urlImg={activePoster.img}\r\n                                        cardTitle={activePoster.title}\r\n                                        formAlt={activePoster.alt}\r\n                                        cardInfo={activePoster.info}\r\n                                    />     \r\n                            }\r\n                        </Modal>\r\n                    </div>    \r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { ChanelScreen } from './ChanelScreen'\r\nimport { DashConfigScreen } from './DashConfigScreen';\r\nimport { DashGalleryScreen } from './DashGalleryScreen';\r\nimport { DashRegScreen } from './DashRegScreen';\r\nimport { InfoScreen } from './InfoScreen';\r\nimport { PosterGalleryScreen } from './PosterGalleryScreen';\r\n\r\nexport const MainWraper = () => {\r\n\r\n    const { activeCH } = useSelector(state => state.channel)\r\n    const { activePg } = useSelector(state => state.page)\r\n\r\n    \r\n\r\n    if(activeCH  === null){\r\n\r\n        switch (activePg) {\r\n            case 'info':\r\n                return <InfoScreen/>\r\n            case 'dashReg':\r\n                return <DashRegScreen/>\r\n            case 'dashConfig':\r\n                return <DashConfigScreen/>\r\n            case 'dashGallery':\r\n                return <DashGalleryScreen/>\r\n            case 'posterPage':\r\n                return <PosterGalleryScreen/>\r\n            default:\r\n                return <InfoScreen/>\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ChanelScreen/>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './footer.css'\r\n\r\nexport const FooterScreen = () => {\r\n    return (\r\n        <div className=\"footer\" style={{position: \"fixed\", bottom: 0}}>\r\n                &copy; 2020 Copyright. All Rights Reserved | Design by Belraysa I+D Group\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { AsideMenuScreen } from './Components_Aside/AsideMenuScreen';\r\nimport { StickyHeader } from './Components_StickyNavbar/StickyHeader';\r\n\r\nimport './css/bootstrap.css'\r\nimport './css/base.css'\r\nimport './css/font-awesome.css';\r\nimport './css/SidebarNav.min.css'\r\nimport './css/custom.css'\r\nimport { MainWraper } from './Components_Main/MainWraper';\r\nimport { FooterScreen } from './Components_Footer/FooterScreen';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startCheckingChannelList } from '../../redux/actions/chActions';\r\nimport { Loading } from '../ui/Loading';\r\nimport { startCheckingSpeakersList } from '../../redux/actions/speakerActions';\r\nimport { startCheckingPostersList } from '../../redux/actions/posterActions';\r\n\r\n\r\nexport const EventDasboardScreen = () => {\r\n\r\n    const [toggleAside, settoggleAside] = useState(false)\r\n\r\n    const { checking:channelChecking } = useSelector( state => state.channel );\r\n    const { checking:speakersChecking } = useSelector( state => state.speaker );\r\n    const { checking:postersChecking } = useSelector( state => state.poster );\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(startCheckingSpeakersList())\r\n        dispatch(startCheckingChannelList())\r\n        dispatch(startCheckingPostersList())\r\n\r\n    }, [dispatch])\r\n\r\n    if(channelChecking || speakersChecking || postersChecking){\r\n        return(\r\n            <> \r\n                <Loading/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={ !toggleAside ? 'cbp-spmenu-push' :'cbp-spmenu-push cbp-spmenu-push-toright'}\r\n        >\r\n            <div className=\"main-content\">\r\n                {/* ASIDE-MENU */}\r\n\t\t        <AsideMenuScreen\r\n                    toggleAside={toggleAside}\r\n                />\r\n\r\n                {/* STICKY-NAVBAR */}\r\n                <StickyHeader\r\n                    toggleAside={toggleAside}\r\n                    settoggleAside={settoggleAside}\r\n                />\r\n\r\n                {/* MainWraper */}\r\n                <div id=\"page-wrapper\">\r\n                    <div className=\"main-page\">\r\n                        <MainWraper/>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n                {/* FOOTER */}\r\n                <FooterScreen/>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from '../../hooks/useForm'\r\nimport { startLogin } from '../../redux/actions/authActions'\r\n\r\nexport const LoginForm = () => {\r\n\r\n    const [formvalues, handleInputChange] = useForm({\r\n        email: '',\r\n        password:''\r\n    })\r\n    const { email , password }= formvalues\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        \r\n        //TODO: VALIDAR CAMPOS opcional Backend hay validación\r\n\r\n        //Login\r\n        dispatch(startLogin(email, password))\r\n    }\r\n\r\n    return (      \r\n        <form \r\n            className=\"signin-form\"\r\n            onSubmit={ handleSubmit }\r\n        >\r\n            <div className=\"form-input\">\r\n                <span className=\"fa fa-envelope\" aria-hidden=\"true\"></span>\r\n                <input \r\n                    type=\"email\" \r\n                    name=\"email\" \r\n                    placeholder=\"Email\" \r\n                    required=\"required\"\r\n                    value= { email }\r\n                    onChange= { handleInputChange }\r\n                />\r\n            </div>\r\n            <div className=\"form-input\">\r\n                <span className=\"fa fa-key\" aria-hidden=\"true\"></span>\r\n                <input \r\n                    type=\"password\" \r\n                    name=\"password\" \r\n                    placeholder=\"Contraseña\" \r\n                    required=\"required\"\r\n                    value= { password }\r\n                    onChange= { handleInputChange }\r\n                />\r\n            </div>\r\n            <div className=\"login-remember d-grid\">\r\n                <label className=\"check-remaind\">\r\n                    <input type=\"checkbox\"/>\r\n                    <span className=\"checkmark\"></span>\r\n                    <p className=\"remember\">Recordarme</p>\r\n                </label>\r\n                <button className=\"btn theme-button\">Iniciar</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { LoginForm } from './LoginForm'\r\nimport './css/bootstrapv4.css'\r\nimport './LoginStyle.css'\r\n\r\n\r\nexport const LoginScreen = () => {\r\n    return (\r\n        <div className=\"form-36-mian section-gap\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"form-inner-cont\">\r\n                    <h3>Iniciar Sesión</h3>\r\n\r\n                    <LoginForm/>\r\n\r\n                    <p className=\"signup\">No te haz registrado aún?\r\n                        <a href=\"#signup.html\" className=\"signuplink\">Ofertas</a>\r\n                    </p>\r\n                </div>\r\n\r\n\r\n                <div className=\"copy-right\">\r\n                    <p>&copy; 2017 BRS-Content. All Rights Reserved | Design by Belraysa I+D Group</p>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Route, Redirect } from 'react-router-dom';\n\n\nexport const PrivateRoute = ({\n    isLogged,\n    component: Component,\n    ...rest\n}) => {\n    \n\n    return (\n        <Route { ...rest }\n            component={ (props) => (\n                ( isLogged )\n                    ? ( <Component { ...props } /> )\n                    : ( <Redirect to=\"/login\" exact/> )\n            )}\n        \n        />\n    )\n}\n\nPrivateRoute.propTypes = {\n    isLogged: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Route, Redirect } from 'react-router-dom';\n\n\nexport const PublicRoute = ({\n    isLogged,\n    component: Component,\n    ...rest\n}) => {\n\n    return (\n        <Route { ...rest }\n            component={ (props) => (\n                ( !isLogged )\n                    ? ( <Component { ...props } /> )\n                    : ( <Redirect to=\"/evento\" exact/> )\n            )}\n        \n        />\n    )\n}\n\nPublicRoute.propTypes = {\n    isLogged: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { EventDasboardScreen } from '../components/EventDasboard/EventDasboardScreen';\r\nimport { LoginScreen } from '../components/LoginScreen/LoginScreen';\r\nimport { Loading } from '../components/ui/Loading';\r\nimport { startCheckingAction } from '../redux/actions/authActions';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {checking, uid} = useSelector(state => state.auth)\r\n\r\n    useEffect(() => {\r\n        dispatch(startCheckingAction())\r\n        \r\n    }, [dispatch])\r\n\r\n    if(checking){\r\n        return <Loading/>\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n            \r\n                <Switch>\r\n                <PrivateRoute\r\n                    isLogged= { !!uid }\r\n                    exact\r\n                    path=\"/evento\"\r\n                    component = { EventDasboardScreen }\r\n                />\r\n                <PublicRoute\r\n                    isLogged= { !!uid }\r\n                    exact\r\n                    path=\"/login\"\r\n                    component={ LoginScreen }\r\n                />\r\n\r\n                <Redirect\r\n                    exact\r\n                    to = \"/login\"\r\n                />\r\n                  \r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","/*************************************\r\n*         [AUTH]  REDUCER            *\r\n**************************************/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking: true\r\n    // uid: \"5fa8097214d34c3e889c932a\",\r\n    // name: \"Ana Sánchez\",\r\n    // userName: \"AnaASG\",\r\n    // mail: \"anelg9@gmail.com\",\r\n    // role: \"USER_ROLE\"\r\n}\r\n\r\nexport const authReducer = (state= initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case types.authLogin:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                checking: false\r\n            }\r\n        case types.authCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false\r\n            }\r\n        case types.authLogout:\r\n            return {\r\n                checking: false\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","/*************************************\r\n*         [CHANNEL]  REDUCER         *\r\n**************************************/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking:true,\r\n    channels:[\r\n        // {\r\n        //     id:'sd88dsddsfdssdfssdsd',\r\n        //     title: 'Sala No.2',\r\n        //     streamSrc: 'https://www.youtube.com/watch?v=YbKhyMbKSrQ',\r\n        //     description:'Una descripcion corta de la conferencia',\r\n        //     speakers: [\r\n        //         {\r\n        //             id:'8sd8asdasdsdd8fssdd',\r\n        //             name: \"Platzi\",\r\n        //             title: \"Constructor\",\r\n        //             country: \"Cuba\",\r\n        //             topic: \"Mi casita y yo\"\r\n        //         },\r\n        //         {\r\n        //             id:'8sd8asdasdd8fssdd',\r\n        //             name: \"Yokoy Kenji\",\r\n        //             title: \"Constructor\",\r\n        //             country: \"Cuba\",\r\n        //             topic: \"Mi casita y yo\"\r\n        //         }\r\n        //     ]\r\n        // }\r\n      \r\n    ],\r\n    activeCH:null\r\n}\r\n\r\nexport const channelReducer = (state= initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case types.chListCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n                channels:[\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case types.chSetActive:\r\n            return {\r\n                ...state,\r\n                activeCH: action.payload\r\n            }\r\n        case types.chUnSetActive:\r\n            return {\r\n                ...state,\r\n                activeCH: null\r\n            }\r\n        case types.chRemove:\r\n            return {\r\n                ...state,\r\n                channels:[\r\n                    ...state.channels.filter( ch => ch.id !== action.payload)\r\n                ]\r\n            }\r\n        case types.chAddNew:\r\n            return {\r\n                ...state,\r\n                channels:[\r\n                    ...state.channels,\r\n                    action.payload\r\n                ]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","/*************************************\r\n*         [PAGE]  REDUCER            *\r\n**************************************/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    activePg: 'info'\r\n}\r\n\r\nexport const pageReducer = (state= initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case types.pgSetActivePage:\r\n            return {\r\n                ...state,\r\n                activePg: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","/*************************************\r\n*         [POSTER]  REDUCER          *\r\n**************************************/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking:true,\r\n    posters:[\r\n        // {\r\n        //     id:'1u31u34k324k23455225',\r\n        //     title:'Primer titulo',\r\n        //     alt: 'texto alternativo',\r\n        //     info: 'Descripcion corta',\r\n        //     img:'https://i.pinimg.com/originals/79/bf/2b/79bf2b98d996dde1f13569759b18edc5.jpg'\r\n        // }          \r\n    ],\r\n    activePoster:null\r\n}\r\n\r\nexport const posterReducer = (state= initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case types.posterListCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n                posters:[\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case types.posterSetActive:\r\n            return {\r\n                ...state,\r\n                activePoster: state.posters.find(poster => poster.id === action.payload)\r\n            }\r\n        case types.posterUnSetActive:\r\n            return {\r\n                ...state,\r\n                activePoster: null\r\n            }\r\n        case types.posterRemove:\r\n            return {\r\n                ...state,\r\n                posters:[\r\n                    ...state.posters.filter( poster => poster.id !== action.payload)\r\n                ]\r\n            }\r\n        case types.posterAddNew:\r\n            return {\r\n                ...state,\r\n                posters:[\r\n                    ...state.posters,\r\n                    action.payload\r\n                ]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","/*************************************\r\n*         [SPEAKER]  REDUCER         *\r\n**************************************/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\n\r\nconst initialState = {\r\n    checking: true,\r\n    speakers:[\r\n        // {\r\n        //     id: \"5fa487169925484114e003d0\",\r\n        //     name: \"Armando Casas\",\r\n        //     title: \"Constructor\",\r\n        //     country: \"Cuba\",\r\n        //     topic: \"Mi casita y yo\",\r\n        //     whatsApp: '+50769226743',\r\n        //     image:'',\r\n        //     usuario:{\r\n        //         uid: '1fa4861699254841146003d0',\r\n        //         name:\"Alex Hernandez\",\r\n        //         userName:\"Alex8902\",\r\n        //         email: \"arnansdfsdfdezo7@gmail.com\",\r\n        //         image:'',\r\n        //         role: \"USER_ROLE\"  \r\n        //     }\r\n        // }\r\n    ],\r\n    activeSpeaker: null\r\n}\r\n\r\n\r\nexport const speakerReducer = (state= initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case types.spListCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n                speakers: [\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case types.spSetActive:\r\n            return {\r\n                ...state,\r\n                activeSpeaker: action.payload\r\n            }\r\n        case types.spRegister:\r\n            return {\r\n                ...state,\r\n                speakers: [\r\n                    ...state.speakers, \r\n                    action.payload\r\n                ]\r\n            }\r\n        case types.spDelete:\r\n            return {\r\n                ...state,\r\n                speakers: state.speakers.filter(\r\n                    speaker=>(speaker.id !==action.payload)\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","/*************************************\r\n*         [USER]  REDUCER            *\r\n**************************************/\r\n\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking: true,\r\n    users:[\r\n        // {\r\n        //     uid: '12h4y5k56h34jk',\r\n        //     name:\"Alex Hernandez\",\r\n        //     userName:\"Alex8902\",\r\n        //     email: \"arnansdfsdfdezo7@gmail.com\",\r\n        //     password:\"123456\",\r\n        //     role: \"ADMIN_ROLE\"  \r\n        // }\r\n    ],\r\n    activeUser: null\r\n}\r\n\r\nexport const userReducer = (state= initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case types.userListCheckingFinish:\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n                users: [\r\n                    ...action.payload\r\n                ]\r\n            }\r\n        case types.userSetActive:\r\n            return {\r\n                ...state,\r\n                activeUser: action.payload\r\n            }\r\n        case types.userUnSetActive:\r\n            return {\r\n                ...state,\r\n                activeUser: null\r\n            }\r\n        case types.userRegister:\r\n            return {\r\n                ...state,\r\n                users: [\r\n                    ...state.users, \r\n                    action.payload\r\n                ]\r\n            }\r\n        case types.userDelete:\r\n            return {\r\n                ...state,\r\n                users: state.users.filter(\r\n                    user=>(user.uid !==action.payload)\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","/*************************************\r\n*            ROOT-REDUCER            *\r\n**************************************/\r\nimport { combineReducers } from 'redux'\r\nimport { authReducer } from './authReducer'\r\nimport { channelReducer } from './channelReducer'\r\nimport { pageReducer } from './pageReducer'\r\nimport { posterReducer } from './posterReducer'\r\nimport { speakerReducer } from './speakerReducer'\r\nimport { userReducer } from './userReducer'\r\n\r\n\r\n\r\nexport const rootReducers = combineReducers({\r\n    auth: authReducer,\r\n    channel: channelReducer,\r\n    page: pageReducer,\r\n    user: userReducer,\r\n    speaker: speakerReducer,\r\n    poster: posterReducer\r\n})","import { applyMiddleware, compose, createStore } from \"redux\";\r\n\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducers } from \"../reducers/rootReducers\";\r\n\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducers,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk)\r\n    )\r\n)","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { AppRouter } from './router/AppRouter'\nimport 'antd/dist/antd.css'\nimport './styles/styles.scss'\nimport { store } from './redux/store/store'\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <AppRouter/>\n    </Provider>\n  )\n}\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}